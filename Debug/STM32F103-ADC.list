
STM32F103-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002df8  08002df8  00012df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e6c  08002e6c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002e6c  08002e6c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e6c  08002e6c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e6c  08002e6c  00012e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e70  08002e70  00012e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  08002ee4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08002ee4  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074f6  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001962  00000000  00000000  0002758f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  00028ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  000296c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017870  00000000  00000000  00029df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e9c  00000000  00000000  00041660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087441  00000000  00000000  0004a4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d193d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000225c  00000000  00000000  000d1990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002de0 	.word	0x08002de0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002de0 	.word	0x08002de0

0800014c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
  //Flag za konverzijo
   */
}
 8000154:	bf00      	nop
 8000156:	370c      	adds	r7, #12
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
	...

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fa8c 	bl	8000680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f82a 	bl	80001c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f8f4 	bl	8000358 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000170:	f000 f87c 	bl	800026c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000174:	f000 f8c6 	bl	8000304 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000178:	480c      	ldr	r0, [pc, #48]	; (80001ac <main+0x4c>)
 800017a:	f000 fef5 	bl	8000f68 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 800017e:	480b      	ldr	r0, [pc, #44]	; (80001ac <main+0x4c>)
 8000180:	f000 fbdc 	bl	800093c <HAL_ADC_Start_IT>
  uart_buf_len = sprintf(uart_buf, "Hello\r\n");
 8000184:	490a      	ldr	r1, [pc, #40]	; (80001b0 <main+0x50>)
 8000186:	480b      	ldr	r0, [pc, #44]	; (80001b4 <main+0x54>)
 8000188:	f002 f9b0 	bl	80024ec <siprintf>
 800018c:	4603      	mov	r3, r0
 800018e:	4a0a      	ldr	r2, [pc, #40]	; (80001b8 <main+0x58>)
 8000190:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 10);
 8000192:	4b09      	ldr	r3, [pc, #36]	; (80001b8 <main+0x58>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	b29a      	uxth	r2, r3
 8000198:	230a      	movs	r3, #10
 800019a:	4906      	ldr	r1, [pc, #24]	; (80001b4 <main+0x54>)
 800019c:	4807      	ldr	r0, [pc, #28]	; (80001bc <main+0x5c>)
 800019e:	f002 f808 	bl	80021b2 <HAL_UART_Transmit>
	HAL_Delay(1000);
 80001a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a6:	f000 facd 	bl	8000744 <HAL_Delay>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 10);
 80001aa:	e7f2      	b.n	8000192 <main+0x32>
 80001ac:	2000008c 	.word	0x2000008c
 80001b0:	08002df8 	.word	0x08002df8
 80001b4:	20000100 	.word	0x20000100
 80001b8:	20000164 	.word	0x20000164
 80001bc:	200000bc 	.word	0x200000bc

080001c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b094      	sub	sp, #80	; 0x50
 80001c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ca:	2228      	movs	r2, #40	; 0x28
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f002 f984 	bl	80024dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d4:	f107 0314 	add.w	r3, r7, #20
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
 80001dc:	605a      	str	r2, [r3, #4]
 80001de:	609a      	str	r2, [r3, #8]
 80001e0:	60da      	str	r2, [r3, #12]
 80001e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
 80001ea:	605a      	str	r2, [r3, #4]
 80001ec:	609a      	str	r2, [r3, #8]
 80001ee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001f0:	2302      	movs	r3, #2
 80001f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f4:	2301      	movs	r3, #1
 80001f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f8:	2310      	movs	r3, #16
 80001fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fc:	2302      	movs	r3, #2
 80001fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000200:	2300      	movs	r3, #0
 8000202:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 8000204:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8000208:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800020e:	4618      	mov	r0, r3
 8000210:	f001 f9f2 	bl	80015f8 <HAL_RCC_OscConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800021a:	f000 f8d7 	bl	80003cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021e:	230f      	movs	r3, #15
 8000220:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000222:	2302      	movs	r3, #2
 8000224:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800022a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800022e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000234:	f107 0314 	add.w	r3, r7, #20
 8000238:	2101      	movs	r1, #1
 800023a:	4618      	mov	r0, r3
 800023c:	f001 fc5e 	bl	8001afc <HAL_RCC_ClockConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000246:	f000 f8c1 	bl	80003cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800024a:	2302      	movs	r3, #2
 800024c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800024e:	2300      	movs	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4618      	mov	r0, r3
 8000256:	f001 fde9 	bl	8001e2c <HAL_RCCEx_PeriphCLKConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000260:	f000 f8b4 	bl	80003cc <Error_Handler>
  }
}
 8000264:	bf00      	nop
 8000266:	3750      	adds	r7, #80	; 0x50
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]
 800027a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800027c:	4b1f      	ldr	r3, [pc, #124]	; (80002fc <MX_ADC1_Init+0x90>)
 800027e:	4a20      	ldr	r2, [pc, #128]	; (8000300 <MX_ADC1_Init+0x94>)
 8000280:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000282:	4b1e      	ldr	r3, [pc, #120]	; (80002fc <MX_ADC1_Init+0x90>)
 8000284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000288:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800028a:	4b1c      	ldr	r3, [pc, #112]	; (80002fc <MX_ADC1_Init+0x90>)
 800028c:	2201      	movs	r2, #1
 800028e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000290:	4b1a      	ldr	r3, [pc, #104]	; (80002fc <MX_ADC1_Init+0x90>)
 8000292:	2200      	movs	r2, #0
 8000294:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000296:	4b19      	ldr	r3, [pc, #100]	; (80002fc <MX_ADC1_Init+0x90>)
 8000298:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800029c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800029e:	4b17      	ldr	r3, [pc, #92]	; (80002fc <MX_ADC1_Init+0x90>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80002a4:	4b15      	ldr	r3, [pc, #84]	; (80002fc <MX_ADC1_Init+0x90>)
 80002a6:	2202      	movs	r2, #2
 80002a8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002aa:	4814      	ldr	r0, [pc, #80]	; (80002fc <MX_ADC1_Init+0x90>)
 80002ac:	f000 fa6e 	bl	800078c <HAL_ADC_Init>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80002b6:	f000 f889 	bl	80003cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002ba:	2301      	movs	r3, #1
 80002bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002be:	2301      	movs	r3, #1
 80002c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5; // vedno je hodil noter
 80002c2:	2307      	movs	r3, #7
 80002c4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	4619      	mov	r1, r3
 80002ca:	480c      	ldr	r0, [pc, #48]	; (80002fc <MX_ADC1_Init+0x90>)
 80002cc:	f000 fcb8 	bl	8000c40 <HAL_ADC_ConfigChannel>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80002d6:	f000 f879 	bl	80003cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002da:	2302      	movs	r3, #2
 80002dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4619      	mov	r1, r3
 80002e2:	4806      	ldr	r0, [pc, #24]	; (80002fc <MX_ADC1_Init+0x90>)
 80002e4:	f000 fcac 	bl	8000c40 <HAL_ADC_ConfigChannel>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80002ee:	f000 f86d 	bl	80003cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	2000008c 	.word	0x2000008c
 8000300:	40012400 	.word	0x40012400

08000304 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000308:	4b11      	ldr	r3, [pc, #68]	; (8000350 <MX_USART2_UART_Init+0x4c>)
 800030a:	4a12      	ldr	r2, [pc, #72]	; (8000354 <MX_USART2_UART_Init+0x50>)
 800030c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800030e:	4b10      	ldr	r3, [pc, #64]	; (8000350 <MX_USART2_UART_Init+0x4c>)
 8000310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000314:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000316:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <MX_USART2_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <MX_USART2_UART_Init+0x4c>)
 800031e:	2200      	movs	r2, #0
 8000320:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000322:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <MX_USART2_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000328:	4b09      	ldr	r3, [pc, #36]	; (8000350 <MX_USART2_UART_Init+0x4c>)
 800032a:	220c      	movs	r2, #12
 800032c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800032e:	4b08      	ldr	r3, [pc, #32]	; (8000350 <MX_USART2_UART_Init+0x4c>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <MX_USART2_UART_Init+0x4c>)
 8000336:	2200      	movs	r2, #0
 8000338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800033a:	4805      	ldr	r0, [pc, #20]	; (8000350 <MX_USART2_UART_Init+0x4c>)
 800033c:	f001 feec 	bl	8002118 <HAL_UART_Init>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000346:	f000 f841 	bl	80003cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	200000bc 	.word	0x200000bc
 8000354:	40004400 	.word	0x40004400

08000358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800035e:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <MX_GPIO_Init+0x70>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	4a19      	ldr	r2, [pc, #100]	; (80003c8 <MX_GPIO_Init+0x70>)
 8000364:	f043 0310 	orr.w	r3, r3, #16
 8000368:	6193      	str	r3, [r2, #24]
 800036a:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <MX_GPIO_Init+0x70>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	f003 0310 	and.w	r3, r3, #16
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000376:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <MX_GPIO_Init+0x70>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a13      	ldr	r2, [pc, #76]	; (80003c8 <MX_GPIO_Init+0x70>)
 800037c:	f043 0320 	orr.w	r3, r3, #32
 8000380:	6193      	str	r3, [r2, #24]
 8000382:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <MX_GPIO_Init+0x70>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	f003 0320 	and.w	r3, r3, #32
 800038a:	60bb      	str	r3, [r7, #8]
 800038c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <MX_GPIO_Init+0x70>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	4a0d      	ldr	r2, [pc, #52]	; (80003c8 <MX_GPIO_Init+0x70>)
 8000394:	f043 0304 	orr.w	r3, r3, #4
 8000398:	6193      	str	r3, [r2, #24]
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <MX_GPIO_Init+0x70>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	f003 0304 	and.w	r3, r3, #4
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <MX_GPIO_Init+0x70>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <MX_GPIO_Init+0x70>)
 80003ac:	f043 0308 	orr.w	r3, r3, #8
 80003b0:	6193      	str	r3, [r2, #24]
 80003b2:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <MX_GPIO_Init+0x70>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	f003 0308 	and.w	r3, r3, #8
 80003ba:	603b      	str	r3, [r7, #0]
 80003bc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003be:	bf00      	nop
 80003c0:	3714      	adds	r7, #20
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	40021000 	.word	0x40021000

080003cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d0:	b672      	cpsid	i
}
 80003d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d4:	e7fe      	b.n	80003d4 <Error_Handler+0x8>
	...

080003d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003de:	4b15      	ldr	r3, [pc, #84]	; (8000434 <HAL_MspInit+0x5c>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	4a14      	ldr	r2, [pc, #80]	; (8000434 <HAL_MspInit+0x5c>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6193      	str	r3, [r2, #24]
 80003ea:	4b12      	ldr	r3, [pc, #72]	; (8000434 <HAL_MspInit+0x5c>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f6:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <HAL_MspInit+0x5c>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	4a0e      	ldr	r2, [pc, #56]	; (8000434 <HAL_MspInit+0x5c>)
 80003fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000400:	61d3      	str	r3, [r2, #28]
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <HAL_MspInit+0x5c>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800040e:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <HAL_MspInit+0x60>)
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <HAL_MspInit+0x60>)
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042a:	bf00      	nop
 800042c:	3714      	adds	r7, #20
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr
 8000434:	40021000 	.word	0x40021000
 8000438:	40010000 	.word	0x40010000

0800043c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b088      	sub	sp, #32
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	605a      	str	r2, [r3, #4]
 800044e:	609a      	str	r2, [r3, #8]
 8000450:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a18      	ldr	r2, [pc, #96]	; (80004b8 <HAL_ADC_MspInit+0x7c>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d129      	bne.n	80004b0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800045c:	4b17      	ldr	r3, [pc, #92]	; (80004bc <HAL_ADC_MspInit+0x80>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a16      	ldr	r2, [pc, #88]	; (80004bc <HAL_ADC_MspInit+0x80>)
 8000462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b14      	ldr	r3, [pc, #80]	; (80004bc <HAL_ADC_MspInit+0x80>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <HAL_ADC_MspInit+0x80>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a10      	ldr	r2, [pc, #64]	; (80004bc <HAL_ADC_MspInit+0x80>)
 800047a:	f043 0304 	orr.w	r3, r3, #4
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <HAL_ADC_MspInit+0x80>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0304 	and.w	r3, r3, #4
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800048c:	2303      	movs	r3, #3
 800048e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000490:	2303      	movs	r3, #3
 8000492:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	4619      	mov	r1, r3
 800049a:	4809      	ldr	r0, [pc, #36]	; (80004c0 <HAL_ADC_MspInit+0x84>)
 800049c:	f000 ff28 	bl	80012f0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2100      	movs	r1, #0
 80004a4:	2012      	movs	r0, #18
 80004a6:	f000 feec 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80004aa:	2012      	movs	r0, #18
 80004ac:	f000 ff05 	bl	80012ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80004b0:	bf00      	nop
 80004b2:	3720      	adds	r7, #32
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40012400 	.word	0x40012400
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010800 	.word	0x40010800

080004c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a1b      	ldr	r2, [pc, #108]	; (800054c <HAL_UART_MspInit+0x88>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d12f      	bne.n	8000544 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004e4:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <HAL_UART_MspInit+0x8c>)
 80004e6:	69db      	ldr	r3, [r3, #28]
 80004e8:	4a19      	ldr	r2, [pc, #100]	; (8000550 <HAL_UART_MspInit+0x8c>)
 80004ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ee:	61d3      	str	r3, [r2, #28]
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <HAL_UART_MspInit+0x8c>)
 80004f2:	69db      	ldr	r3, [r3, #28]
 80004f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <HAL_UART_MspInit+0x8c>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a13      	ldr	r2, [pc, #76]	; (8000550 <HAL_UART_MspInit+0x8c>)
 8000502:	f043 0304 	orr.w	r3, r3, #4
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <HAL_UART_MspInit+0x8c>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0304 	and.w	r3, r3, #4
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000514:	2304      	movs	r3, #4
 8000516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000518:	2302      	movs	r3, #2
 800051a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800051c:	2303      	movs	r3, #3
 800051e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	4619      	mov	r1, r3
 8000526:	480b      	ldr	r0, [pc, #44]	; (8000554 <HAL_UART_MspInit+0x90>)
 8000528:	f000 fee2 	bl	80012f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800052c:	2308      	movs	r3, #8
 800052e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	4619      	mov	r1, r3
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <HAL_UART_MspInit+0x90>)
 8000540:	f000 fed6 	bl	80012f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000544:	bf00      	nop
 8000546:	3720      	adds	r7, #32
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40004400 	.word	0x40004400
 8000550:	40021000 	.word	0x40021000
 8000554:	40010800 	.word	0x40010800

08000558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800055c:	e7fe      	b.n	800055c <NMI_Handler+0x4>

0800055e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <HardFault_Handler+0x4>

08000564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <MemManage_Handler+0x4>

0800056a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <BusFault_Handler+0x4>

08000570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <UsageFault_Handler+0x4>

08000576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr

0800058e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800059e:	f000 f8b5 	bl	800070c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80005ac:	4802      	ldr	r0, [pc, #8]	; (80005b8 <ADC1_2_IRQHandler+0x10>)
 80005ae:	f000 fa7b 	bl	8000aa8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	2000008c 	.word	0x2000008c

080005bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c4:	4a14      	ldr	r2, [pc, #80]	; (8000618 <_sbrk+0x5c>)
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <_sbrk+0x60>)
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <_sbrk+0x64>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d102      	bne.n	80005de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <_sbrk+0x64>)
 80005da:	4a12      	ldr	r2, [pc, #72]	; (8000624 <_sbrk+0x68>)
 80005dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <_sbrk+0x64>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4413      	add	r3, r2
 80005e6:	693a      	ldr	r2, [r7, #16]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d207      	bcs.n	80005fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005ec:	f001 ff4c 	bl	8002488 <__errno>
 80005f0:	4603      	mov	r3, r0
 80005f2:	220c      	movs	r2, #12
 80005f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	e009      	b.n	8000610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <_sbrk+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <_sbrk+0x64>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4413      	add	r3, r2
 800060a:	4a05      	ldr	r2, [pc, #20]	; (8000620 <_sbrk+0x64>)
 800060c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800060e:	68fb      	ldr	r3, [r7, #12]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20005000 	.word	0x20005000
 800061c:	00000400 	.word	0x00000400
 8000620:	20000168 	.word	0x20000168
 8000624:	20000180 	.word	0x20000180

08000628 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000634:	480c      	ldr	r0, [pc, #48]	; (8000668 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000636:	490d      	ldr	r1, [pc, #52]	; (800066c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000638:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800063c:	e002      	b.n	8000644 <LoopCopyDataInit>

0800063e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000642:	3304      	adds	r3, #4

08000644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000648:	d3f9      	bcc.n	800063e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064a:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800064c:	4c0a      	ldr	r4, [pc, #40]	; (8000678 <LoopFillZerobss+0x22>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000650:	e001      	b.n	8000656 <LoopFillZerobss>

08000652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000654:	3204      	adds	r2, #4

08000656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000658:	d3fb      	bcc.n	8000652 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800065a:	f7ff ffe5 	bl	8000628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800065e:	f001 ff19 	bl	8002494 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000662:	f7ff fd7d 	bl	8000160 <main>
  bx lr
 8000666:	4770      	bx	lr
  ldr r0, =_sdata
 8000668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800066c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000670:	08002e74 	.word	0x08002e74
  ldr r2, =_sbss
 8000674:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000678:	20000180 	.word	0x20000180

0800067c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800067c:	e7fe      	b.n	800067c <CAN1_RX1_IRQHandler>
	...

08000680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <HAL_Init+0x28>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <HAL_Init+0x28>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000690:	2003      	movs	r0, #3
 8000692:	f000 fdeb 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000696:	2000      	movs	r0, #0
 8000698:	f000 f808 	bl	80006ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800069c:	f7ff fe9c 	bl	80003d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40022000 	.word	0x40022000

080006ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <HAL_InitTick+0x54>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <HAL_InitTick+0x58>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4619      	mov	r1, r3
 80006be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fe03 	bl	80012d6 <HAL_SYSTICK_Config>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e00e      	b.n	80006f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b0f      	cmp	r3, #15
 80006de:	d80a      	bhi.n	80006f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e0:	2200      	movs	r2, #0
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	f04f 30ff 	mov.w	r0, #4294967295
 80006e8:	f000 fdcb 	bl	8001282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006ec:	4a06      	ldr	r2, [pc, #24]	; (8000708 <HAL_InitTick+0x5c>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006f2:	2300      	movs	r3, #0
 80006f4:	e000      	b.n	80006f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000000 	.word	0x20000000
 8000704:	20000008 	.word	0x20000008
 8000708:	20000004 	.word	0x20000004

0800070c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <HAL_IncTick+0x1c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	4b05      	ldr	r3, [pc, #20]	; (800072c <HAL_IncTick+0x20>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4413      	add	r3, r2
 800071c:	4a03      	ldr	r2, [pc, #12]	; (800072c <HAL_IncTick+0x20>)
 800071e:	6013      	str	r3, [r2, #0]
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	20000008 	.word	0x20000008
 800072c:	2000016c 	.word	0x2000016c

08000730 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return uwTick;
 8000734:	4b02      	ldr	r3, [pc, #8]	; (8000740 <HAL_GetTick+0x10>)
 8000736:	681b      	ldr	r3, [r3, #0]
}
 8000738:	4618      	mov	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	2000016c 	.word	0x2000016c

08000744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800074c:	f7ff fff0 	bl	8000730 <HAL_GetTick>
 8000750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800075c:	d005      	beq.n	800076a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_Delay+0x44>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	461a      	mov	r2, r3
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	4413      	add	r3, r2
 8000768:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800076a:	bf00      	nop
 800076c:	f7ff ffe0 	bl	8000730 <HAL_GetTick>
 8000770:	4602      	mov	r2, r0
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	68fa      	ldr	r2, [r7, #12]
 8000778:	429a      	cmp	r2, r3
 800077a:	d8f7      	bhi.n	800076c <HAL_Delay+0x28>
  {
  }
}
 800077c:	bf00      	nop
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000008 	.word	0x20000008

0800078c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000794:	2300      	movs	r3, #0
 8000796:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000798:	2300      	movs	r3, #0
 800079a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d101      	bne.n	80007ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	e0be      	b.n	800092c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d109      	bne.n	80007d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2200      	movs	r2, #0
 80007c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2200      	movs	r2, #0
 80007c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff fe36 	bl	800043c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f000 fb87 	bl	8000ee4 <ADC_ConversionStop_Disable>
 80007d6:	4603      	mov	r3, r0
 80007d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007de:	f003 0310 	and.w	r3, r3, #16
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f040 8099 	bne.w	800091a <HAL_ADC_Init+0x18e>
 80007e8:	7dfb      	ldrb	r3, [r7, #23]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	f040 8095 	bne.w	800091a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007f8:	f023 0302 	bic.w	r3, r3, #2
 80007fc:	f043 0202 	orr.w	r2, r3, #2
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800080c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	7b1b      	ldrb	r3, [r3, #12]
 8000812:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000814:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	4313      	orrs	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000824:	d003      	beq.n	800082e <HAL_ADC_Init+0xa2>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d102      	bne.n	8000834 <HAL_ADC_Init+0xa8>
 800082e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000832:	e000      	b.n	8000836 <HAL_ADC_Init+0xaa>
 8000834:	2300      	movs	r3, #0
 8000836:	693a      	ldr	r2, [r7, #16]
 8000838:	4313      	orrs	r3, r2
 800083a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	7d1b      	ldrb	r3, [r3, #20]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d119      	bne.n	8000878 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	7b1b      	ldrb	r3, [r3, #12]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d109      	bne.n	8000860 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	3b01      	subs	r3, #1
 8000852:	035a      	lsls	r2, r3, #13
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	4313      	orrs	r3, r2
 8000858:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	e00b      	b.n	8000878 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000864:	f043 0220 	orr.w	r2, r3, #32
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000870:	f043 0201 	orr.w	r2, r3, #1
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	430a      	orrs	r2, r1
 800088a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	689a      	ldr	r2, [r3, #8]
 8000892:	4b28      	ldr	r3, [pc, #160]	; (8000934 <HAL_ADC_Init+0x1a8>)
 8000894:	4013      	ands	r3, r2
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	6812      	ldr	r2, [r2, #0]
 800089a:	68b9      	ldr	r1, [r7, #8]
 800089c:	430b      	orrs	r3, r1
 800089e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008a8:	d003      	beq.n	80008b2 <HAL_ADC_Init+0x126>
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d104      	bne.n	80008bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	051b      	lsls	r3, r3, #20
 80008ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	430a      	orrs	r2, r1
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	689a      	ldr	r2, [r3, #8]
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <HAL_ADC_Init+0x1ac>)
 80008d8:	4013      	ands	r3, r2
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d10b      	bne.n	80008f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2200      	movs	r2, #0
 80008e4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ea:	f023 0303 	bic.w	r3, r3, #3
 80008ee:	f043 0201 	orr.w	r2, r3, #1
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008f6:	e018      	b.n	800092a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008fc:	f023 0312 	bic.w	r3, r3, #18
 8000900:	f043 0210 	orr.w	r2, r3, #16
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800090c:	f043 0201 	orr.w	r2, r3, #1
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000918:	e007      	b.n	800092a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091e:	f043 0210 	orr.w	r2, r3, #16
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800092a:	7dfb      	ldrb	r3, [r7, #23]
}
 800092c:	4618      	mov	r0, r3
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	ffe1f7fd 	.word	0xffe1f7fd
 8000938:	ff1f0efe 	.word	0xff1f0efe

0800093c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000944:	2300      	movs	r3, #0
 8000946:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800094e:	2b01      	cmp	r3, #1
 8000950:	d101      	bne.n	8000956 <HAL_ADC_Start_IT+0x1a>
 8000952:	2302      	movs	r3, #2
 8000954:	e0a0      	b.n	8000a98 <HAL_ADC_Start_IT+0x15c>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2201      	movs	r2, #1
 800095a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f000 fa66 	bl	8000e30 <ADC_Enable>
 8000964:	4603      	mov	r3, r0
 8000966:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	2b00      	cmp	r3, #0
 800096c:	f040 808f 	bne.w	8000a8e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000974:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000978:	f023 0301 	bic.w	r3, r3, #1
 800097c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a45      	ldr	r2, [pc, #276]	; (8000aa0 <HAL_ADC_Start_IT+0x164>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d105      	bne.n	800099a <HAL_ADC_Start_IT+0x5e>
 800098e:	4b45      	ldr	r3, [pc, #276]	; (8000aa4 <HAL_ADC_Start_IT+0x168>)
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000996:	2b00      	cmp	r3, #0
 8000998:	d115      	bne.n	80009c6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800099e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d026      	beq.n	8000a02 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009c4:	e01d      	b.n	8000a02 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a33      	ldr	r2, [pc, #204]	; (8000aa4 <HAL_ADC_Start_IT+0x168>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d004      	beq.n	80009e6 <HAL_ADC_Start_IT+0xaa>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a2f      	ldr	r2, [pc, #188]	; (8000aa0 <HAL_ADC_Start_IT+0x164>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d10d      	bne.n	8000a02 <HAL_ADC_Start_IT+0xc6>
 80009e6:	4b2f      	ldr	r3, [pc, #188]	; (8000aa4 <HAL_ADC_Start_IT+0x168>)
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d007      	beq.n	8000a02 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d006      	beq.n	8000a1c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a12:	f023 0206 	bic.w	r2, r3, #6
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a1a:	e002      	b.n	8000a22 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f06f 0202 	mvn.w	r2, #2
 8000a32:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	685a      	ldr	r2, [r3, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f042 0220 	orr.w	r2, r2, #32
 8000a42:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000a4e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a52:	d113      	bne.n	8000a7c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a58:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <HAL_ADC_Start_IT+0x164>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d105      	bne.n	8000a6a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_ADC_Start_IT+0x168>)
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d108      	bne.n	8000a7c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	e00c      	b.n	8000a96 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	689a      	ldr	r2, [r3, #8]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	e003      	b.n	8000a96 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2200      	movs	r2, #0
 8000a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40012800 	.word	0x40012800
 8000aa4:	40012400 	.word	0x40012400

08000aa8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f003 0320 	and.w	r3, r3, #32
 8000aba:	2b20      	cmp	r3, #32
 8000abc:	d140      	bne.n	8000b40 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d139      	bne.n	8000b40 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad0:	f003 0310 	and.w	r3, r3, #16
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d105      	bne.n	8000ae4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000adc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000aee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000af2:	d11d      	bne.n	8000b30 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d119      	bne.n	8000b30 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	685a      	ldr	r2, [r3, #4]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f022 0220 	bic.w	r2, r2, #32
 8000b0a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d105      	bne.n	8000b30 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b28:	f043 0201 	orr.w	r2, r3, #1
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff fb0b 	bl	800014c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f06f 0212 	mvn.w	r2, #18
 8000b3e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4a:	2b80      	cmp	r3, #128	; 0x80
 8000b4c:	d14f      	bne.n	8000bee <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	2b04      	cmp	r3, #4
 8000b5a:	d148      	bne.n	8000bee <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b60:	f003 0310 	and.w	r3, r3, #16
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d105      	bne.n	8000b74 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b6c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000b7e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000b82:	d012      	beq.n	8000baa <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d125      	bne.n	8000bde <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000b9c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ba0:	d11d      	bne.n	8000bde <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d119      	bne.n	8000bde <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	685a      	ldr	r2, [r3, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bb8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d105      	bne.n	8000bde <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd6:	f043 0201 	orr.w	r2, r3, #1
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f000 fa6e 	bl	80010c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f06f 020c 	mvn.w	r2, #12
 8000bec:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf8:	2b40      	cmp	r3, #64	; 0x40
 8000bfa:	d114      	bne.n	8000c26 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d10d      	bne.n	8000c26 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 f809 	bl	8000c2e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f06f 0201 	mvn.w	r2, #1
 8000c24:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d101      	bne.n	8000c60 <HAL_ADC_ConfigChannel+0x20>
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	e0dc      	b.n	8000e1a <HAL_ADC_ConfigChannel+0x1da>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2201      	movs	r2, #1
 8000c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b06      	cmp	r3, #6
 8000c6e:	d81c      	bhi.n	8000caa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	4413      	add	r3, r2
 8000c80:	3b05      	subs	r3, #5
 8000c82:	221f      	movs	r2, #31
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	4019      	ands	r1, r3
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	6818      	ldr	r0, [r3, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	4613      	mov	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	4413      	add	r3, r2
 8000c9a:	3b05      	subs	r3, #5
 8000c9c:	fa00 f203 	lsl.w	r2, r0, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ca8:	e03c      	b.n	8000d24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2b0c      	cmp	r3, #12
 8000cb0:	d81c      	bhi.n	8000cec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	3b23      	subs	r3, #35	; 0x23
 8000cc4:	221f      	movs	r2, #31
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	4019      	ands	r1, r3
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	6818      	ldr	r0, [r3, #0]
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	4413      	add	r3, r2
 8000cdc:	3b23      	subs	r3, #35	; 0x23
 8000cde:	fa00 f203 	lsl.w	r2, r0, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	631a      	str	r2, [r3, #48]	; 0x30
 8000cea:	e01b      	b.n	8000d24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	4413      	add	r3, r2
 8000cfc:	3b41      	subs	r3, #65	; 0x41
 8000cfe:	221f      	movs	r2, #31
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	4019      	ands	r1, r3
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	6818      	ldr	r0, [r3, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685a      	ldr	r2, [r3, #4]
 8000d10:	4613      	mov	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	3b41      	subs	r3, #65	; 0x41
 8000d18:	fa00 f203 	lsl.w	r2, r0, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	430a      	orrs	r2, r1
 8000d22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b09      	cmp	r3, #9
 8000d2a:	d91c      	bls.n	8000d66 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	68d9      	ldr	r1, [r3, #12]
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4613      	mov	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	3b1e      	subs	r3, #30
 8000d3e:	2207      	movs	r2, #7
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	4019      	ands	r1, r3
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	6898      	ldr	r0, [r3, #8]
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4613      	mov	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	4413      	add	r3, r2
 8000d56:	3b1e      	subs	r3, #30
 8000d58:	fa00 f203 	lsl.w	r2, r0, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	430a      	orrs	r2, r1
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	e019      	b.n	8000d9a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	6919      	ldr	r1, [r3, #16]
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4613      	mov	r3, r2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	4413      	add	r3, r2
 8000d76:	2207      	movs	r2, #7
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	4019      	ands	r1, r3
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	6898      	ldr	r0, [r3, #8]
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4413      	add	r3, r2
 8000d8e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	430a      	orrs	r2, r1
 8000d98:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b10      	cmp	r3, #16
 8000da0:	d003      	beq.n	8000daa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000da6:	2b11      	cmp	r3, #17
 8000da8:	d132      	bne.n	8000e10 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a1d      	ldr	r2, [pc, #116]	; (8000e24 <HAL_ADC_ConfigChannel+0x1e4>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d125      	bne.n	8000e00 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d126      	bne.n	8000e10 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000dd0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b10      	cmp	r3, #16
 8000dd8:	d11a      	bne.n	8000e10 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <HAL_ADC_ConfigChannel+0x1e8>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <HAL_ADC_ConfigChannel+0x1ec>)
 8000de0:	fba2 2303 	umull	r2, r3, r2, r3
 8000de4:	0c9a      	lsrs	r2, r3, #18
 8000de6:	4613      	mov	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000df0:	e002      	b.n	8000df8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f9      	bne.n	8000df2 <HAL_ADC_ConfigChannel+0x1b2>
 8000dfe:	e007      	b.n	8000e10 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e04:	f043 0220 	orr.w	r2, r3, #32
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	40012400 	.word	0x40012400
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	431bde83 	.word	0x431bde83

08000e30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d040      	beq.n	8000ed0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f042 0201 	orr.w	r2, r2, #1
 8000e5c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <ADC_Enable+0xac>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a1f      	ldr	r2, [pc, #124]	; (8000ee0 <ADC_Enable+0xb0>)
 8000e64:	fba2 2303 	umull	r2, r3, r2, r3
 8000e68:	0c9b      	lsrs	r3, r3, #18
 8000e6a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e6c:	e002      	b.n	8000e74 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1f9      	bne.n	8000e6e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e7a:	f7ff fc59 	bl	8000730 <HAL_GetTick>
 8000e7e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e80:	e01f      	b.n	8000ec2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e82:	f7ff fc55 	bl	8000730 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d918      	bls.n	8000ec2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d011      	beq.n	8000ec2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea2:	f043 0210 	orr.w	r2, r3, #16
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eae:	f043 0201 	orr.w	r2, r3, #1
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e007      	b.n	8000ed2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d1d8      	bne.n	8000e82 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	431bde83 	.word	0x431bde83

08000ee4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d12e      	bne.n	8000f5c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 0201 	bic.w	r2, r2, #1
 8000f0c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f0e:	f7ff fc0f 	bl	8000730 <HAL_GetTick>
 8000f12:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f14:	e01b      	b.n	8000f4e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f16:	f7ff fc0b 	bl	8000730 <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d914      	bls.n	8000f4e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d10d      	bne.n	8000f4e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f36:	f043 0210 	orr.w	r2, r3, #16
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f42:	f043 0201 	orr.w	r2, r3, #1
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e007      	b.n	8000f5e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d0dc      	beq.n	8000f16 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d101      	bne.n	8000f86 <HAL_ADCEx_Calibration_Start+0x1e>
 8000f82:	2302      	movs	r3, #2
 8000f84:	e095      	b.n	80010b2 <HAL_ADCEx_Calibration_Start+0x14a>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ffa8 	bl	8000ee4 <ADC_ConversionStop_Disable>
 8000f94:	4603      	mov	r3, r0
 8000f96:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000f98:	7dfb      	ldrb	r3, [r7, #23]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f040 8084 	bne.w	80010a8 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fa8:	f023 0302 	bic.w	r3, r3, #2
 8000fac:	f043 0202 	orr.w	r2, r3, #2
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000fb4:	4b41      	ldr	r3, [pc, #260]	; (80010bc <HAL_ADCEx_Calibration_Start+0x154>)
 8000fb6:	681c      	ldr	r4, [r3, #0]
 8000fb8:	2002      	movs	r0, #2
 8000fba:	f000 ffed 	bl	8001f98 <HAL_RCCEx_GetPeriphCLKFreq>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8000fc4:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8000fc6:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8000fc8:	e002      	b.n	8000fd0 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f9      	bne.n	8000fca <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ff2a 	bl	8000e30 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 0208 	orr.w	r2, r2, #8
 8000fea:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000fec:	f7ff fba0 	bl	8000730 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000ff2:	e01b      	b.n	800102c <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000ff4:	f7ff fb9c 	bl	8000730 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b0a      	cmp	r3, #10
 8001000:	d914      	bls.n	800102c <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00d      	beq.n	800102c <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001014:	f023 0312 	bic.w	r3, r3, #18
 8001018:	f043 0210 	orr.w	r2, r3, #16
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e042      	b.n	80010b2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1dc      	bne.n	8000ff4 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f042 0204 	orr.w	r2, r2, #4
 8001048:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800104a:	f7ff fb71 	bl	8000730 <HAL_GetTick>
 800104e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001050:	e01b      	b.n	800108a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001052:	f7ff fb6d 	bl	8000730 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b0a      	cmp	r3, #10
 800105e:	d914      	bls.n	800108a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00d      	beq.n	800108a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001072:	f023 0312 	bic.w	r3, r3, #18
 8001076:	f043 0210 	orr.w	r2, r3, #16
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e013      	b.n	80010b2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1dc      	bne.n	8001052 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109c:	f023 0303 	bic.w	r3, r3, #3
 80010a0:	f043 0201 	orr.w	r2, r3, #1
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	371c      	adds	r7, #28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd90      	pop	{r4, r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000000 	.word	0x20000000

080010c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
	...

080010d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f0:	4013      	ands	r3, r2
 80010f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001106:	4a04      	ldr	r2, [pc, #16]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	60d3      	str	r3, [r2, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <__NVIC_GetPriorityGrouping+0x18>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	f003 0307 	and.w	r3, r3, #7
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	2b00      	cmp	r3, #0
 8001148:	db0b      	blt.n	8001162 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	f003 021f 	and.w	r2, r3, #31
 8001150:	4906      	ldr	r1, [pc, #24]	; (800116c <__NVIC_EnableIRQ+0x34>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	2001      	movs	r0, #1
 800115a:	fa00 f202 	lsl.w	r2, r0, r2
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff90 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff2d 	bl	80010d4 <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff42 	bl	800111c <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff90 	bl	80011c4 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5f 	bl	8001170 <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff35 	bl	8001138 <__NVIC_EnableIRQ>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffa2 	bl	8001228 <SysTick_Config>
 80012e4:	4603      	mov	r3, r0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b08b      	sub	sp, #44	; 0x2c
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012fe:	2300      	movs	r3, #0
 8001300:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001302:	e169      	b.n	80015d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001304:	2201      	movs	r2, #1
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	69fa      	ldr	r2, [r7, #28]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	429a      	cmp	r2, r3
 800131e:	f040 8158 	bne.w	80015d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	4a9a      	ldr	r2, [pc, #616]	; (8001590 <HAL_GPIO_Init+0x2a0>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d05e      	beq.n	80013ea <HAL_GPIO_Init+0xfa>
 800132c:	4a98      	ldr	r2, [pc, #608]	; (8001590 <HAL_GPIO_Init+0x2a0>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d875      	bhi.n	800141e <HAL_GPIO_Init+0x12e>
 8001332:	4a98      	ldr	r2, [pc, #608]	; (8001594 <HAL_GPIO_Init+0x2a4>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d058      	beq.n	80013ea <HAL_GPIO_Init+0xfa>
 8001338:	4a96      	ldr	r2, [pc, #600]	; (8001594 <HAL_GPIO_Init+0x2a4>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d86f      	bhi.n	800141e <HAL_GPIO_Init+0x12e>
 800133e:	4a96      	ldr	r2, [pc, #600]	; (8001598 <HAL_GPIO_Init+0x2a8>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d052      	beq.n	80013ea <HAL_GPIO_Init+0xfa>
 8001344:	4a94      	ldr	r2, [pc, #592]	; (8001598 <HAL_GPIO_Init+0x2a8>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d869      	bhi.n	800141e <HAL_GPIO_Init+0x12e>
 800134a:	4a94      	ldr	r2, [pc, #592]	; (800159c <HAL_GPIO_Init+0x2ac>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d04c      	beq.n	80013ea <HAL_GPIO_Init+0xfa>
 8001350:	4a92      	ldr	r2, [pc, #584]	; (800159c <HAL_GPIO_Init+0x2ac>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d863      	bhi.n	800141e <HAL_GPIO_Init+0x12e>
 8001356:	4a92      	ldr	r2, [pc, #584]	; (80015a0 <HAL_GPIO_Init+0x2b0>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d046      	beq.n	80013ea <HAL_GPIO_Init+0xfa>
 800135c:	4a90      	ldr	r2, [pc, #576]	; (80015a0 <HAL_GPIO_Init+0x2b0>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d85d      	bhi.n	800141e <HAL_GPIO_Init+0x12e>
 8001362:	2b12      	cmp	r3, #18
 8001364:	d82a      	bhi.n	80013bc <HAL_GPIO_Init+0xcc>
 8001366:	2b12      	cmp	r3, #18
 8001368:	d859      	bhi.n	800141e <HAL_GPIO_Init+0x12e>
 800136a:	a201      	add	r2, pc, #4	; (adr r2, 8001370 <HAL_GPIO_Init+0x80>)
 800136c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001370:	080013eb 	.word	0x080013eb
 8001374:	080013c5 	.word	0x080013c5
 8001378:	080013d7 	.word	0x080013d7
 800137c:	08001419 	.word	0x08001419
 8001380:	0800141f 	.word	0x0800141f
 8001384:	0800141f 	.word	0x0800141f
 8001388:	0800141f 	.word	0x0800141f
 800138c:	0800141f 	.word	0x0800141f
 8001390:	0800141f 	.word	0x0800141f
 8001394:	0800141f 	.word	0x0800141f
 8001398:	0800141f 	.word	0x0800141f
 800139c:	0800141f 	.word	0x0800141f
 80013a0:	0800141f 	.word	0x0800141f
 80013a4:	0800141f 	.word	0x0800141f
 80013a8:	0800141f 	.word	0x0800141f
 80013ac:	0800141f 	.word	0x0800141f
 80013b0:	0800141f 	.word	0x0800141f
 80013b4:	080013cd 	.word	0x080013cd
 80013b8:	080013e1 	.word	0x080013e1
 80013bc:	4a79      	ldr	r2, [pc, #484]	; (80015a4 <HAL_GPIO_Init+0x2b4>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013c2:	e02c      	b.n	800141e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	623b      	str	r3, [r7, #32]
          break;
 80013ca:	e029      	b.n	8001420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	3304      	adds	r3, #4
 80013d2:	623b      	str	r3, [r7, #32]
          break;
 80013d4:	e024      	b.n	8001420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	3308      	adds	r3, #8
 80013dc:	623b      	str	r3, [r7, #32]
          break;
 80013de:	e01f      	b.n	8001420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	330c      	adds	r3, #12
 80013e6:	623b      	str	r3, [r7, #32]
          break;
 80013e8:	e01a      	b.n	8001420 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d102      	bne.n	80013f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013f2:	2304      	movs	r3, #4
 80013f4:	623b      	str	r3, [r7, #32]
          break;
 80013f6:	e013      	b.n	8001420 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d105      	bne.n	800140c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001400:	2308      	movs	r3, #8
 8001402:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69fa      	ldr	r2, [r7, #28]
 8001408:	611a      	str	r2, [r3, #16]
          break;
 800140a:	e009      	b.n	8001420 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800140c:	2308      	movs	r3, #8
 800140e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69fa      	ldr	r2, [r7, #28]
 8001414:	615a      	str	r2, [r3, #20]
          break;
 8001416:	e003      	b.n	8001420 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
          break;
 800141c:	e000      	b.n	8001420 <HAL_GPIO_Init+0x130>
          break;
 800141e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	2bff      	cmp	r3, #255	; 0xff
 8001424:	d801      	bhi.n	800142a <HAL_GPIO_Init+0x13a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	e001      	b.n	800142e <HAL_GPIO_Init+0x13e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3304      	adds	r3, #4
 800142e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	2bff      	cmp	r3, #255	; 0xff
 8001434:	d802      	bhi.n	800143c <HAL_GPIO_Init+0x14c>
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	e002      	b.n	8001442 <HAL_GPIO_Init+0x152>
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	3b08      	subs	r3, #8
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	210f      	movs	r1, #15
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	401a      	ands	r2, r3
 8001454:	6a39      	ldr	r1, [r7, #32]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	fa01 f303 	lsl.w	r3, r1, r3
 800145c:	431a      	orrs	r2, r3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 80b1 	beq.w	80015d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001470:	4b4d      	ldr	r3, [pc, #308]	; (80015a8 <HAL_GPIO_Init+0x2b8>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a4c      	ldr	r2, [pc, #304]	; (80015a8 <HAL_GPIO_Init+0x2b8>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b4a      	ldr	r3, [pc, #296]	; (80015a8 <HAL_GPIO_Init+0x2b8>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001488:	4a48      	ldr	r2, [pc, #288]	; (80015ac <HAL_GPIO_Init+0x2bc>)
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	089b      	lsrs	r3, r3, #2
 800148e:	3302      	adds	r3, #2
 8001490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001494:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	220f      	movs	r2, #15
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	4013      	ands	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a40      	ldr	r2, [pc, #256]	; (80015b0 <HAL_GPIO_Init+0x2c0>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d013      	beq.n	80014dc <HAL_GPIO_Init+0x1ec>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a3f      	ldr	r2, [pc, #252]	; (80015b4 <HAL_GPIO_Init+0x2c4>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d00d      	beq.n	80014d8 <HAL_GPIO_Init+0x1e8>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a3e      	ldr	r2, [pc, #248]	; (80015b8 <HAL_GPIO_Init+0x2c8>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d007      	beq.n	80014d4 <HAL_GPIO_Init+0x1e4>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a3d      	ldr	r2, [pc, #244]	; (80015bc <HAL_GPIO_Init+0x2cc>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d101      	bne.n	80014d0 <HAL_GPIO_Init+0x1e0>
 80014cc:	2303      	movs	r3, #3
 80014ce:	e006      	b.n	80014de <HAL_GPIO_Init+0x1ee>
 80014d0:	2304      	movs	r3, #4
 80014d2:	e004      	b.n	80014de <HAL_GPIO_Init+0x1ee>
 80014d4:	2302      	movs	r3, #2
 80014d6:	e002      	b.n	80014de <HAL_GPIO_Init+0x1ee>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <HAL_GPIO_Init+0x1ee>
 80014dc:	2300      	movs	r3, #0
 80014de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e0:	f002 0203 	and.w	r2, r2, #3
 80014e4:	0092      	lsls	r2, r2, #2
 80014e6:	4093      	lsls	r3, r2
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014ee:	492f      	ldr	r1, [pc, #188]	; (80015ac <HAL_GPIO_Init+0x2bc>)
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	3302      	adds	r3, #2
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d006      	beq.n	8001516 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001508:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <HAL_GPIO_Init+0x2d0>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	492c      	ldr	r1, [pc, #176]	; (80015c0 <HAL_GPIO_Init+0x2d0>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	600b      	str	r3, [r1, #0]
 8001514:	e006      	b.n	8001524 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001516:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <HAL_GPIO_Init+0x2d0>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	43db      	mvns	r3, r3
 800151e:	4928      	ldr	r1, [pc, #160]	; (80015c0 <HAL_GPIO_Init+0x2d0>)
 8001520:	4013      	ands	r3, r2
 8001522:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d006      	beq.n	800153e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001530:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <HAL_GPIO_Init+0x2d0>)
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	4922      	ldr	r1, [pc, #136]	; (80015c0 <HAL_GPIO_Init+0x2d0>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
 800153c:	e006      	b.n	800154c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800153e:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <HAL_GPIO_Init+0x2d0>)
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	43db      	mvns	r3, r3
 8001546:	491e      	ldr	r1, [pc, #120]	; (80015c0 <HAL_GPIO_Init+0x2d0>)
 8001548:	4013      	ands	r3, r2
 800154a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d006      	beq.n	8001566 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <HAL_GPIO_Init+0x2d0>)
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	4918      	ldr	r1, [pc, #96]	; (80015c0 <HAL_GPIO_Init+0x2d0>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	608b      	str	r3, [r1, #8]
 8001564:	e006      	b.n	8001574 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <HAL_GPIO_Init+0x2d0>)
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	43db      	mvns	r3, r3
 800156e:	4914      	ldr	r1, [pc, #80]	; (80015c0 <HAL_GPIO_Init+0x2d0>)
 8001570:	4013      	ands	r3, r2
 8001572:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d021      	beq.n	80015c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <HAL_GPIO_Init+0x2d0>)
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	490e      	ldr	r1, [pc, #56]	; (80015c0 <HAL_GPIO_Init+0x2d0>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	60cb      	str	r3, [r1, #12]
 800158c:	e021      	b.n	80015d2 <HAL_GPIO_Init+0x2e2>
 800158e:	bf00      	nop
 8001590:	10320000 	.word	0x10320000
 8001594:	10310000 	.word	0x10310000
 8001598:	10220000 	.word	0x10220000
 800159c:	10210000 	.word	0x10210000
 80015a0:	10120000 	.word	0x10120000
 80015a4:	10110000 	.word	0x10110000
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010000 	.word	0x40010000
 80015b0:	40010800 	.word	0x40010800
 80015b4:	40010c00 	.word	0x40010c00
 80015b8:	40011000 	.word	0x40011000
 80015bc:	40011400 	.word	0x40011400
 80015c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_GPIO_Init+0x304>)
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	4909      	ldr	r1, [pc, #36]	; (80015f4 <HAL_GPIO_Init+0x304>)
 80015ce:	4013      	ands	r3, r2
 80015d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	3301      	adds	r3, #1
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	fa22 f303 	lsr.w	r3, r2, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f47f ae8e 	bne.w	8001304 <HAL_GPIO_Init+0x14>
  }
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	372c      	adds	r7, #44	; 0x2c
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	40010400 	.word	0x40010400

080015f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e272      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 8087 	beq.w	8001726 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001618:	4b92      	ldr	r3, [pc, #584]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	2b04      	cmp	r3, #4
 8001622:	d00c      	beq.n	800163e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001624:	4b8f      	ldr	r3, [pc, #572]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 030c 	and.w	r3, r3, #12
 800162c:	2b08      	cmp	r3, #8
 800162e:	d112      	bne.n	8001656 <HAL_RCC_OscConfig+0x5e>
 8001630:	4b8c      	ldr	r3, [pc, #560]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163c:	d10b      	bne.n	8001656 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163e:	4b89      	ldr	r3, [pc, #548]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d06c      	beq.n	8001724 <HAL_RCC_OscConfig+0x12c>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d168      	bne.n	8001724 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e24c      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165e:	d106      	bne.n	800166e <HAL_RCC_OscConfig+0x76>
 8001660:	4b80      	ldr	r3, [pc, #512]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a7f      	ldr	r2, [pc, #508]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	e02e      	b.n	80016cc <HAL_RCC_OscConfig+0xd4>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x98>
 8001676:	4b7b      	ldr	r3, [pc, #492]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a7a      	ldr	r2, [pc, #488]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 800167c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b78      	ldr	r3, [pc, #480]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a77      	ldr	r2, [pc, #476]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001688:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e01d      	b.n	80016cc <HAL_RCC_OscConfig+0xd4>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0xbc>
 800169a:	4b72      	ldr	r3, [pc, #456]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a71      	ldr	r2, [pc, #452]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	4b6f      	ldr	r3, [pc, #444]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a6e      	ldr	r2, [pc, #440]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	e00b      	b.n	80016cc <HAL_RCC_OscConfig+0xd4>
 80016b4:	4b6b      	ldr	r3, [pc, #428]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a6a      	ldr	r2, [pc, #424]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b68      	ldr	r3, [pc, #416]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a67      	ldr	r2, [pc, #412]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d013      	beq.n	80016fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff f82c 	bl	8000730 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff f828 	bl	8000730 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e200      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ee:	4b5d      	ldr	r3, [pc, #372]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0xe4>
 80016fa:	e014      	b.n	8001726 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff f818 	bl	8000730 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff f814 	bl	8000730 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	; 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e1ec      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001716:	4b53      	ldr	r3, [pc, #332]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x10c>
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d063      	beq.n	80017fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001732:	4b4c      	ldr	r3, [pc, #304]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00b      	beq.n	8001756 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800173e:	4b49      	ldr	r3, [pc, #292]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b08      	cmp	r3, #8
 8001748:	d11c      	bne.n	8001784 <HAL_RCC_OscConfig+0x18c>
 800174a:	4b46      	ldr	r3, [pc, #280]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d116      	bne.n	8001784 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001756:	4b43      	ldr	r3, [pc, #268]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d005      	beq.n	800176e <HAL_RCC_OscConfig+0x176>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d001      	beq.n	800176e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e1c0      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176e:	4b3d      	ldr	r3, [pc, #244]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4939      	ldr	r1, [pc, #228]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 800177e:	4313      	orrs	r3, r2
 8001780:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001782:	e03a      	b.n	80017fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d020      	beq.n	80017ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800178c:	4b36      	ldr	r3, [pc, #216]	; (8001868 <HAL_RCC_OscConfig+0x270>)
 800178e:	2201      	movs	r2, #1
 8001790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001792:	f7fe ffcd 	bl	8000730 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179a:	f7fe ffc9 	bl	8000730 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e1a1      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b8:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4927      	ldr	r1, [pc, #156]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	600b      	str	r3, [r1, #0]
 80017cc:	e015      	b.n	80017fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ce:	4b26      	ldr	r3, [pc, #152]	; (8001868 <HAL_RCC_OscConfig+0x270>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7fe ffac 	bl	8000730 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017dc:	f7fe ffa8 	bl	8000730 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e180      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ee:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d03a      	beq.n	800187c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d019      	beq.n	8001842 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001810:	2201      	movs	r2, #1
 8001812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001814:	f7fe ff8c 	bl	8000730 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181c:	f7fe ff88 	bl	8000730 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e160      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182e:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <HAL_RCC_OscConfig+0x26c>)
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800183a:	2001      	movs	r0, #1
 800183c:	f000 fad8 	bl	8001df0 <RCC_Delay>
 8001840:	e01c      	b.n	800187c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001848:	f7fe ff72 	bl	8000730 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184e:	e00f      	b.n	8001870 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001850:	f7fe ff6e 	bl	8000730 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d908      	bls.n	8001870 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e146      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000
 8001868:	42420000 	.word	0x42420000
 800186c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001870:	4b92      	ldr	r3, [pc, #584]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1e9      	bne.n	8001850 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 80a6 	beq.w	80019d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188e:	4b8b      	ldr	r3, [pc, #556]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10d      	bne.n	80018b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	4b88      	ldr	r3, [pc, #544]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	4a87      	ldr	r2, [pc, #540]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	61d3      	str	r3, [r2, #28]
 80018a6:	4b85      	ldr	r3, [pc, #532]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b2:	2301      	movs	r3, #1
 80018b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b6:	4b82      	ldr	r3, [pc, #520]	; (8001ac0 <HAL_RCC_OscConfig+0x4c8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d118      	bne.n	80018f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c2:	4b7f      	ldr	r3, [pc, #508]	; (8001ac0 <HAL_RCC_OscConfig+0x4c8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a7e      	ldr	r2, [pc, #504]	; (8001ac0 <HAL_RCC_OscConfig+0x4c8>)
 80018c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ce:	f7fe ff2f 	bl	8000730 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d6:	f7fe ff2b 	bl	8000730 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b64      	cmp	r3, #100	; 0x64
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e103      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e8:	4b75      	ldr	r3, [pc, #468]	; (8001ac0 <HAL_RCC_OscConfig+0x4c8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d106      	bne.n	800190a <HAL_RCC_OscConfig+0x312>
 80018fc:	4b6f      	ldr	r3, [pc, #444]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4a6e      	ldr	r2, [pc, #440]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6213      	str	r3, [r2, #32]
 8001908:	e02d      	b.n	8001966 <HAL_RCC_OscConfig+0x36e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x334>
 8001912:	4b6a      	ldr	r3, [pc, #424]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	4a69      	ldr	r2, [pc, #420]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	6213      	str	r3, [r2, #32]
 800191e:	4b67      	ldr	r3, [pc, #412]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	4a66      	ldr	r2, [pc, #408]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001924:	f023 0304 	bic.w	r3, r3, #4
 8001928:	6213      	str	r3, [r2, #32]
 800192a:	e01c      	b.n	8001966 <HAL_RCC_OscConfig+0x36e>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	2b05      	cmp	r3, #5
 8001932:	d10c      	bne.n	800194e <HAL_RCC_OscConfig+0x356>
 8001934:	4b61      	ldr	r3, [pc, #388]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	4a60      	ldr	r2, [pc, #384]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	6213      	str	r3, [r2, #32]
 8001940:	4b5e      	ldr	r3, [pc, #376]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4a5d      	ldr	r2, [pc, #372]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6213      	str	r3, [r2, #32]
 800194c:	e00b      	b.n	8001966 <HAL_RCC_OscConfig+0x36e>
 800194e:	4b5b      	ldr	r3, [pc, #364]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	4a5a      	ldr	r2, [pc, #360]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001954:	f023 0301 	bic.w	r3, r3, #1
 8001958:	6213      	str	r3, [r2, #32]
 800195a:	4b58      	ldr	r3, [pc, #352]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	4a57      	ldr	r2, [pc, #348]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d015      	beq.n	800199a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196e:	f7fe fedf 	bl	8000730 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001974:	e00a      	b.n	800198c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001976:	f7fe fedb 	bl	8000730 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	f241 3288 	movw	r2, #5000	; 0x1388
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e0b1      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198c:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0ee      	beq.n	8001976 <HAL_RCC_OscConfig+0x37e>
 8001998:	e014      	b.n	80019c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199a:	f7fe fec9 	bl	8000730 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a0:	e00a      	b.n	80019b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a2:	f7fe fec5 	bl	8000730 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e09b      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b8:	4b40      	ldr	r3, [pc, #256]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1ee      	bne.n	80019a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d105      	bne.n	80019d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ca:	4b3c      	ldr	r3, [pc, #240]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4a3b      	ldr	r2, [pc, #236]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8087 	beq.w	8001aee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019e0:	4b36      	ldr	r3, [pc, #216]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 030c 	and.w	r3, r3, #12
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d061      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d146      	bne.n	8001a82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f4:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <HAL_RCC_OscConfig+0x4cc>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7fe fe99 	bl	8000730 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a02:	f7fe fe95 	bl	8000730 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e06d      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a14:	4b29      	ldr	r3, [pc, #164]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1f0      	bne.n	8001a02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a28:	d108      	bne.n	8001a3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a2a:	4b24      	ldr	r3, [pc, #144]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	4921      	ldr	r1, [pc, #132]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a19      	ldr	r1, [r3, #32]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	430b      	orrs	r3, r1
 8001a4e:	491b      	ldr	r1, [pc, #108]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <HAL_RCC_OscConfig+0x4cc>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5a:	f7fe fe69 	bl	8000730 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a62:	f7fe fe65 	bl	8000730 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e03d      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x46a>
 8001a80:	e035      	b.n	8001aee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <HAL_RCC_OscConfig+0x4cc>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7fe fe52 	bl	8000730 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a90:	f7fe fe4e 	bl	8000730 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e026      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x498>
 8001aae:	e01e      	b.n	8001aee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d107      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e019      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40007000 	.word	0x40007000
 8001ac4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_OscConfig+0x500>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d106      	bne.n	8001aea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d001      	beq.n	8001aee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40021000 	.word	0x40021000

08001afc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0d0      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b10:	4b6a      	ldr	r3, [pc, #424]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d910      	bls.n	8001b40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b67      	ldr	r3, [pc, #412]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 0207 	bic.w	r2, r3, #7
 8001b26:	4965      	ldr	r1, [pc, #404]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b63      	ldr	r3, [pc, #396]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0b8      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d020      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b58:	4b59      	ldr	r3, [pc, #356]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4a58      	ldr	r2, [pc, #352]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b70:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4a52      	ldr	r2, [pc, #328]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7c:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	494d      	ldr	r1, [pc, #308]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d040      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d115      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e07f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bba:	4b41      	ldr	r3, [pc, #260]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d109      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e073      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bca:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e06b      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bda:	4b39      	ldr	r3, [pc, #228]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f023 0203 	bic.w	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4936      	ldr	r1, [pc, #216]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bec:	f7fe fda0 	bl	8000730 <HAL_GetTick>
 8001bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf4:	f7fe fd9c 	bl	8000730 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e053      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 020c 	and.w	r2, r3, #12
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d1eb      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d210      	bcs.n	8001c4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 0207 	bic.w	r2, r3, #7
 8001c32:	4922      	ldr	r1, [pc, #136]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e032      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4916      	ldr	r1, [pc, #88]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d009      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	490e      	ldr	r1, [pc, #56]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c8a:	f000 f821 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	490a      	ldr	r1, [pc, #40]	; (8001cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c9c:	5ccb      	ldrb	r3, [r1, r3]
 8001c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca2:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_RCC_ClockConfig+0x1d0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fcfe 	bl	80006ac <HAL_InitTick>

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40022000 	.word	0x40022000
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	08002e20 	.word	0x08002e20
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20000004 	.word	0x20000004

08001cd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd0:	b490      	push	{r4, r7}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cd6:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <HAL_RCC_GetSysClockFreq+0xac>)
 8001cd8:	1d3c      	adds	r4, r7, #4
 8001cda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ce0:	f240 2301 	movw	r3, #513	; 0x201
 8001ce4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cfa:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d002      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x40>
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d003      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0x46>
 8001d0e:	e02b      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d10:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d12:	623b      	str	r3, [r7, #32]
      break;
 8001d14:	e02b      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	0c9b      	lsrs	r3, r3, #18
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	3328      	adds	r3, #40	; 0x28
 8001d20:	443b      	add	r3, r7
 8001d22:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d26:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d012      	beq.n	8001d58 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	0c5b      	lsrs	r3, r3, #17
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	3328      	adds	r3, #40	; 0x28
 8001d3e:	443b      	add	r3, r7
 8001d40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d44:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d4a:	fb03 f202 	mul.w	r2, r3, r2
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
 8001d56:	e004      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d5c:	fb02 f303 	mul.w	r3, r2, r3
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	623b      	str	r3, [r7, #32]
      break;
 8001d66:	e002      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d6a:	623b      	str	r3, [r7, #32]
      break;
 8001d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3728      	adds	r7, #40	; 0x28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc90      	pop	{r4, r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	08002e00 	.word	0x08002e00
 8001d80:	40021000 	.word	0x40021000
 8001d84:	007a1200 	.word	0x007a1200
 8001d88:	003d0900 	.word	0x003d0900

08001d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d90:	4b02      	ldr	r3, [pc, #8]	; (8001d9c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	20000000 	.word	0x20000000

08001da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001da4:	f7ff fff2 	bl	8001d8c <HAL_RCC_GetHCLKFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4903      	ldr	r1, [pc, #12]	; (8001dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08002e30 	.word	0x08002e30

08001dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dcc:	f7ff ffde 	bl	8001d8c <HAL_RCC_GetHCLKFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	0adb      	lsrs	r3, r3, #11
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	4903      	ldr	r1, [pc, #12]	; (8001dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	08002e30 	.word	0x08002e30

08001df0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <RCC_Delay+0x34>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <RCC_Delay+0x38>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	0a5b      	lsrs	r3, r3, #9
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
 8001e0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e0c:	bf00      	nop
  }
  while (Delay --);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1e5a      	subs	r2, r3, #1
 8001e12:	60fa      	str	r2, [r7, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f9      	bne.n	8001e0c <RCC_Delay+0x1c>
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	20000000 	.word	0x20000000
 8001e28:	10624dd3 	.word	0x10624dd3

08001e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d07d      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4c:	4b4f      	ldr	r3, [pc, #316]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10d      	bne.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e58:	4b4c      	ldr	r3, [pc, #304]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	4a4b      	ldr	r2, [pc, #300]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e62:	61d3      	str	r3, [r2, #28]
 8001e64:	4b49      	ldr	r3, [pc, #292]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e70:	2301      	movs	r3, #1
 8001e72:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e74:	4b46      	ldr	r3, [pc, #280]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d118      	bne.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e80:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a42      	ldr	r2, [pc, #264]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8c:	f7fe fc50 	bl	8000730 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e92:	e008      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e94:	f7fe fc4c 	bl	8000730 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	; 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e06d      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea6:	4b3a      	ldr	r3, [pc, #232]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eb2:	4b36      	ldr	r3, [pc, #216]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d02e      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d027      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ed0:	4b2e      	ldr	r3, [pc, #184]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eda:	4b2e      	ldr	r3, [pc, #184]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ee0:	4b2c      	ldr	r3, [pc, #176]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ee6:	4a29      	ldr	r2, [pc, #164]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d014      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef6:	f7fe fc1b 	bl	8000730 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efc:	e00a      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7fe fc17 	bl	8000730 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e036      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f14:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0ee      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f20:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4917      	ldr	r1, [pc, #92]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f32:	7dfb      	ldrb	r3, [r7, #23]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d105      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	4a13      	ldr	r2, [pc, #76]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f50:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	490b      	ldr	r1, [pc, #44]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d008      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	4904      	ldr	r1, [pc, #16]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40007000 	.word	0x40007000
 8001f94:	42420440 	.word	0x42420440

08001f98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b08d      	sub	sp, #52	; 0x34
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fa0:	4b58      	ldr	r3, [pc, #352]	; (8002104 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001fa2:	f107 040c 	add.w	r4, r7, #12
 8001fa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fac:	f240 2301 	movw	r3, #513	; 0x201
 8001fb0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b10      	cmp	r3, #16
 8001fca:	d00a      	beq.n	8001fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b10      	cmp	r3, #16
 8001fd0:	f200 808e 	bhi.w	80020f0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d049      	beq.n	800206e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d079      	beq.n	80020d4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001fe0:	e086      	b.n	80020f0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8001fe2:	4b49      	ldr	r3, [pc, #292]	; (8002108 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001fe8:	4b47      	ldr	r3, [pc, #284]	; (8002108 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d07f      	beq.n	80020f4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	0c9b      	lsrs	r3, r3, #18
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	3330      	adds	r3, #48	; 0x30
 8001ffe:	443b      	add	r3, r7
 8002000:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002004:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d017      	beq.n	8002040 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002010:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	0c5b      	lsrs	r3, r3, #17
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	3330      	adds	r3, #48	; 0x30
 800201c:	443b      	add	r3, r7
 800201e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00d      	beq.n	800204a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800202e:	4a37      	ldr	r2, [pc, #220]	; (800210c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	fbb2 f2f3 	udiv	r2, r2, r3
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	fb02 f303 	mul.w	r3, r2, r3
 800203c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800203e:	e004      	b.n	800204a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	4a33      	ldr	r2, [pc, #204]	; (8002110 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002044:	fb02 f303 	mul.w	r3, r2, r3
 8002048:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800204a:	4b2f      	ldr	r3, [pc, #188]	; (8002108 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002052:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002056:	d102      	bne.n	800205e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800205c:	e04a      	b.n	80020f4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800205e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	4a2c      	ldr	r2, [pc, #176]	; (8002114 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002064:	fba2 2303 	umull	r2, r3, r2, r3
 8002068:	085b      	lsrs	r3, r3, #1
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800206c:	e042      	b.n	80020f4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800206e:	4b26      	ldr	r3, [pc, #152]	; (8002108 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800207a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800207e:	d108      	bne.n	8002092 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800208a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002090:	e01f      	b.n	80020d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800209c:	d109      	bne.n	80020b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80020aa:	f649 4340 	movw	r3, #40000	; 0x9c40
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b0:	e00f      	b.n	80020d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020bc:	d11c      	bne.n	80020f8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d016      	beq.n	80020f8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80020ca:	f24f 4324 	movw	r3, #62500	; 0xf424
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80020d0:	e012      	b.n	80020f8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80020d2:	e011      	b.n	80020f8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80020d4:	f7ff fe78 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 80020d8:	4602      	mov	r2, r0
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	0b9b      	lsrs	r3, r3, #14
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	3301      	adds	r3, #1
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80020ee:	e004      	b.n	80020fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80020f0:	bf00      	nop
 80020f2:	e002      	b.n	80020fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80020f4:	bf00      	nop
 80020f6:	e000      	b.n	80020fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80020f8:	bf00      	nop
    }
  }
  return (frequency);
 80020fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3734      	adds	r7, #52	; 0x34
 8002100:	46bd      	mov	sp, r7
 8002102:	bd90      	pop	{r4, r7, pc}
 8002104:	08002e10 	.word	0x08002e10
 8002108:	40021000 	.word	0x40021000
 800210c:	007a1200 	.word	0x007a1200
 8002110:	003d0900 	.word	0x003d0900
 8002114:	aaaaaaab 	.word	0xaaaaaaab

08002118 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e03f      	b.n	80021aa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d106      	bne.n	8002144 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7fe f9c0 	bl	80004c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2224      	movs	r2, #36	; 0x24
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800215a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f905 	bl	800236c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002170:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695a      	ldr	r2, [r3, #20]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002180:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002190:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b08a      	sub	sp, #40	; 0x28
 80021b6:	af02      	add	r7, sp, #8
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	603b      	str	r3, [r7, #0]
 80021be:	4613      	mov	r3, r2
 80021c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b20      	cmp	r3, #32
 80021d0:	d17c      	bne.n	80022cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <HAL_UART_Transmit+0x2c>
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e075      	b.n	80022ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_UART_Transmit+0x3e>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e06e      	b.n	80022ce <HAL_UART_Transmit+0x11c>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2221      	movs	r2, #33	; 0x21
 8002202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002206:	f7fe fa93 	bl	8000730 <HAL_GetTick>
 800220a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	88fa      	ldrh	r2, [r7, #6]
 8002210:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	88fa      	ldrh	r2, [r7, #6]
 8002216:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002220:	d108      	bne.n	8002234 <HAL_UART_Transmit+0x82>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d104      	bne.n	8002234 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	e003      	b.n	800223c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002238:	2300      	movs	r3, #0
 800223a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002244:	e02a      	b.n	800229c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2200      	movs	r2, #0
 800224e:	2180      	movs	r1, #128	; 0x80
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f840 	bl	80022d6 <UART_WaitOnFlagUntilTimeout>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e036      	b.n	80022ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10b      	bne.n	800227e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002274:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	3302      	adds	r3, #2
 800227a:	61bb      	str	r3, [r7, #24]
 800227c:	e007      	b.n	800228e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	781a      	ldrb	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	3301      	adds	r3, #1
 800228c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002292:	b29b      	uxth	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1cf      	bne.n	8002246 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2200      	movs	r2, #0
 80022ae:	2140      	movs	r1, #64	; 0x40
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f810 	bl	80022d6 <UART_WaitOnFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e006      	b.n	80022ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	e000      	b.n	80022ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022cc:	2302      	movs	r3, #2
  }
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3720      	adds	r7, #32
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b084      	sub	sp, #16
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	603b      	str	r3, [r7, #0]
 80022e2:	4613      	mov	r3, r2
 80022e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022e6:	e02c      	b.n	8002342 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ee:	d028      	beq.n	8002342 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d007      	beq.n	8002306 <UART_WaitOnFlagUntilTimeout+0x30>
 80022f6:	f7fe fa1b 	bl	8000730 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	429a      	cmp	r2, r3
 8002304:	d21d      	bcs.n	8002342 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002314:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695a      	ldr	r2, [r3, #20]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0201 	bic.w	r2, r2, #1
 8002324:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2220      	movs	r2, #32
 800232a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2220      	movs	r2, #32
 8002332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e00f      	b.n	8002362 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4013      	ands	r3, r2
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	429a      	cmp	r2, r3
 8002350:	bf0c      	ite	eq
 8002352:	2301      	moveq	r3, #1
 8002354:	2300      	movne	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	429a      	cmp	r2, r3
 800235e:	d0c3      	beq.n	80022e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	4313      	orrs	r3, r2
 800239a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80023a6:	f023 030c 	bic.w	r3, r3, #12
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	68b9      	ldr	r1, [r7, #8]
 80023b0:	430b      	orrs	r3, r1
 80023b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a2c      	ldr	r2, [pc, #176]	; (8002480 <UART_SetConfig+0x114>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d103      	bne.n	80023dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023d4:	f7ff fcf8 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	e002      	b.n	80023e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80023dc:	f7ff fce0 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 80023e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	009a      	lsls	r2, r3, #2
 80023ec:	441a      	add	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f8:	4a22      	ldr	r2, [pc, #136]	; (8002484 <UART_SetConfig+0x118>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	0119      	lsls	r1, r3, #4
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	009a      	lsls	r2, r3, #2
 800240c:	441a      	add	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	fbb2 f2f3 	udiv	r2, r2, r3
 8002418:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <UART_SetConfig+0x118>)
 800241a:	fba3 0302 	umull	r0, r3, r3, r2
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	2064      	movs	r0, #100	; 0x64
 8002422:	fb00 f303 	mul.w	r3, r0, r3
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	3332      	adds	r3, #50	; 0x32
 800242c:	4a15      	ldr	r2, [pc, #84]	; (8002484 <UART_SetConfig+0x118>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002438:	4419      	add	r1, r3
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	009a      	lsls	r2, r3, #2
 8002444:	441a      	add	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <UART_SetConfig+0x118>)
 8002452:	fba3 0302 	umull	r0, r3, r3, r2
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	2064      	movs	r0, #100	; 0x64
 800245a:	fb00 f303 	mul.w	r3, r0, r3
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	3332      	adds	r3, #50	; 0x32
 8002464:	4a07      	ldr	r2, [pc, #28]	; (8002484 <UART_SetConfig+0x118>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	f003 020f 	and.w	r2, r3, #15
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	440a      	add	r2, r1
 8002476:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002478:	bf00      	nop
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40013800 	.word	0x40013800
 8002484:	51eb851f 	.word	0x51eb851f

08002488 <__errno>:
 8002488:	4b01      	ldr	r3, [pc, #4]	; (8002490 <__errno+0x8>)
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	2000000c 	.word	0x2000000c

08002494 <__libc_init_array>:
 8002494:	b570      	push	{r4, r5, r6, lr}
 8002496:	2600      	movs	r6, #0
 8002498:	4d0c      	ldr	r5, [pc, #48]	; (80024cc <__libc_init_array+0x38>)
 800249a:	4c0d      	ldr	r4, [pc, #52]	; (80024d0 <__libc_init_array+0x3c>)
 800249c:	1b64      	subs	r4, r4, r5
 800249e:	10a4      	asrs	r4, r4, #2
 80024a0:	42a6      	cmp	r6, r4
 80024a2:	d109      	bne.n	80024b8 <__libc_init_array+0x24>
 80024a4:	f000 fc9c 	bl	8002de0 <_init>
 80024a8:	2600      	movs	r6, #0
 80024aa:	4d0a      	ldr	r5, [pc, #40]	; (80024d4 <__libc_init_array+0x40>)
 80024ac:	4c0a      	ldr	r4, [pc, #40]	; (80024d8 <__libc_init_array+0x44>)
 80024ae:	1b64      	subs	r4, r4, r5
 80024b0:	10a4      	asrs	r4, r4, #2
 80024b2:	42a6      	cmp	r6, r4
 80024b4:	d105      	bne.n	80024c2 <__libc_init_array+0x2e>
 80024b6:	bd70      	pop	{r4, r5, r6, pc}
 80024b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80024bc:	4798      	blx	r3
 80024be:	3601      	adds	r6, #1
 80024c0:	e7ee      	b.n	80024a0 <__libc_init_array+0xc>
 80024c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80024c6:	4798      	blx	r3
 80024c8:	3601      	adds	r6, #1
 80024ca:	e7f2      	b.n	80024b2 <__libc_init_array+0x1e>
 80024cc:	08002e6c 	.word	0x08002e6c
 80024d0:	08002e6c 	.word	0x08002e6c
 80024d4:	08002e6c 	.word	0x08002e6c
 80024d8:	08002e70 	.word	0x08002e70

080024dc <memset>:
 80024dc:	4603      	mov	r3, r0
 80024de:	4402      	add	r2, r0
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d100      	bne.n	80024e6 <memset+0xa>
 80024e4:	4770      	bx	lr
 80024e6:	f803 1b01 	strb.w	r1, [r3], #1
 80024ea:	e7f9      	b.n	80024e0 <memset+0x4>

080024ec <siprintf>:
 80024ec:	b40e      	push	{r1, r2, r3}
 80024ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80024f2:	b500      	push	{lr}
 80024f4:	b09c      	sub	sp, #112	; 0x70
 80024f6:	ab1d      	add	r3, sp, #116	; 0x74
 80024f8:	9002      	str	r0, [sp, #8]
 80024fa:	9006      	str	r0, [sp, #24]
 80024fc:	9107      	str	r1, [sp, #28]
 80024fe:	9104      	str	r1, [sp, #16]
 8002500:	4808      	ldr	r0, [pc, #32]	; (8002524 <siprintf+0x38>)
 8002502:	4909      	ldr	r1, [pc, #36]	; (8002528 <siprintf+0x3c>)
 8002504:	f853 2b04 	ldr.w	r2, [r3], #4
 8002508:	9105      	str	r1, [sp, #20]
 800250a:	6800      	ldr	r0, [r0, #0]
 800250c:	a902      	add	r1, sp, #8
 800250e:	9301      	str	r3, [sp, #4]
 8002510:	f000 f868 	bl	80025e4 <_svfiprintf_r>
 8002514:	2200      	movs	r2, #0
 8002516:	9b02      	ldr	r3, [sp, #8]
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	b01c      	add	sp, #112	; 0x70
 800251c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002520:	b003      	add	sp, #12
 8002522:	4770      	bx	lr
 8002524:	2000000c 	.word	0x2000000c
 8002528:	ffff0208 	.word	0xffff0208

0800252c <__ssputs_r>:
 800252c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002530:	688e      	ldr	r6, [r1, #8]
 8002532:	4682      	mov	sl, r0
 8002534:	429e      	cmp	r6, r3
 8002536:	460c      	mov	r4, r1
 8002538:	4690      	mov	r8, r2
 800253a:	461f      	mov	r7, r3
 800253c:	d838      	bhi.n	80025b0 <__ssputs_r+0x84>
 800253e:	898a      	ldrh	r2, [r1, #12]
 8002540:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002544:	d032      	beq.n	80025ac <__ssputs_r+0x80>
 8002546:	6825      	ldr	r5, [r4, #0]
 8002548:	6909      	ldr	r1, [r1, #16]
 800254a:	3301      	adds	r3, #1
 800254c:	eba5 0901 	sub.w	r9, r5, r1
 8002550:	6965      	ldr	r5, [r4, #20]
 8002552:	444b      	add	r3, r9
 8002554:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002558:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800255c:	106d      	asrs	r5, r5, #1
 800255e:	429d      	cmp	r5, r3
 8002560:	bf38      	it	cc
 8002562:	461d      	movcc	r5, r3
 8002564:	0553      	lsls	r3, r2, #21
 8002566:	d531      	bpl.n	80025cc <__ssputs_r+0xa0>
 8002568:	4629      	mov	r1, r5
 800256a:	f000 fb6f 	bl	8002c4c <_malloc_r>
 800256e:	4606      	mov	r6, r0
 8002570:	b950      	cbnz	r0, 8002588 <__ssputs_r+0x5c>
 8002572:	230c      	movs	r3, #12
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	f8ca 3000 	str.w	r3, [sl]
 800257c:	89a3      	ldrh	r3, [r4, #12]
 800257e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002582:	81a3      	strh	r3, [r4, #12]
 8002584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002588:	464a      	mov	r2, r9
 800258a:	6921      	ldr	r1, [r4, #16]
 800258c:	f000 face 	bl	8002b2c <memcpy>
 8002590:	89a3      	ldrh	r3, [r4, #12]
 8002592:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800259a:	81a3      	strh	r3, [r4, #12]
 800259c:	6126      	str	r6, [r4, #16]
 800259e:	444e      	add	r6, r9
 80025a0:	6026      	str	r6, [r4, #0]
 80025a2:	463e      	mov	r6, r7
 80025a4:	6165      	str	r5, [r4, #20]
 80025a6:	eba5 0509 	sub.w	r5, r5, r9
 80025aa:	60a5      	str	r5, [r4, #8]
 80025ac:	42be      	cmp	r6, r7
 80025ae:	d900      	bls.n	80025b2 <__ssputs_r+0x86>
 80025b0:	463e      	mov	r6, r7
 80025b2:	4632      	mov	r2, r6
 80025b4:	4641      	mov	r1, r8
 80025b6:	6820      	ldr	r0, [r4, #0]
 80025b8:	f000 fac6 	bl	8002b48 <memmove>
 80025bc:	68a3      	ldr	r3, [r4, #8]
 80025be:	2000      	movs	r0, #0
 80025c0:	1b9b      	subs	r3, r3, r6
 80025c2:	60a3      	str	r3, [r4, #8]
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	4433      	add	r3, r6
 80025c8:	6023      	str	r3, [r4, #0]
 80025ca:	e7db      	b.n	8002584 <__ssputs_r+0x58>
 80025cc:	462a      	mov	r2, r5
 80025ce:	f000 fbb1 	bl	8002d34 <_realloc_r>
 80025d2:	4606      	mov	r6, r0
 80025d4:	2800      	cmp	r0, #0
 80025d6:	d1e1      	bne.n	800259c <__ssputs_r+0x70>
 80025d8:	4650      	mov	r0, sl
 80025da:	6921      	ldr	r1, [r4, #16]
 80025dc:	f000 face 	bl	8002b7c <_free_r>
 80025e0:	e7c7      	b.n	8002572 <__ssputs_r+0x46>
	...

080025e4 <_svfiprintf_r>:
 80025e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025e8:	4698      	mov	r8, r3
 80025ea:	898b      	ldrh	r3, [r1, #12]
 80025ec:	4607      	mov	r7, r0
 80025ee:	061b      	lsls	r3, r3, #24
 80025f0:	460d      	mov	r5, r1
 80025f2:	4614      	mov	r4, r2
 80025f4:	b09d      	sub	sp, #116	; 0x74
 80025f6:	d50e      	bpl.n	8002616 <_svfiprintf_r+0x32>
 80025f8:	690b      	ldr	r3, [r1, #16]
 80025fa:	b963      	cbnz	r3, 8002616 <_svfiprintf_r+0x32>
 80025fc:	2140      	movs	r1, #64	; 0x40
 80025fe:	f000 fb25 	bl	8002c4c <_malloc_r>
 8002602:	6028      	str	r0, [r5, #0]
 8002604:	6128      	str	r0, [r5, #16]
 8002606:	b920      	cbnz	r0, 8002612 <_svfiprintf_r+0x2e>
 8002608:	230c      	movs	r3, #12
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	f04f 30ff 	mov.w	r0, #4294967295
 8002610:	e0d1      	b.n	80027b6 <_svfiprintf_r+0x1d2>
 8002612:	2340      	movs	r3, #64	; 0x40
 8002614:	616b      	str	r3, [r5, #20]
 8002616:	2300      	movs	r3, #0
 8002618:	9309      	str	r3, [sp, #36]	; 0x24
 800261a:	2320      	movs	r3, #32
 800261c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002620:	2330      	movs	r3, #48	; 0x30
 8002622:	f04f 0901 	mov.w	r9, #1
 8002626:	f8cd 800c 	str.w	r8, [sp, #12]
 800262a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80027d0 <_svfiprintf_r+0x1ec>
 800262e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002632:	4623      	mov	r3, r4
 8002634:	469a      	mov	sl, r3
 8002636:	f813 2b01 	ldrb.w	r2, [r3], #1
 800263a:	b10a      	cbz	r2, 8002640 <_svfiprintf_r+0x5c>
 800263c:	2a25      	cmp	r2, #37	; 0x25
 800263e:	d1f9      	bne.n	8002634 <_svfiprintf_r+0x50>
 8002640:	ebba 0b04 	subs.w	fp, sl, r4
 8002644:	d00b      	beq.n	800265e <_svfiprintf_r+0x7a>
 8002646:	465b      	mov	r3, fp
 8002648:	4622      	mov	r2, r4
 800264a:	4629      	mov	r1, r5
 800264c:	4638      	mov	r0, r7
 800264e:	f7ff ff6d 	bl	800252c <__ssputs_r>
 8002652:	3001      	adds	r0, #1
 8002654:	f000 80aa 	beq.w	80027ac <_svfiprintf_r+0x1c8>
 8002658:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800265a:	445a      	add	r2, fp
 800265c:	9209      	str	r2, [sp, #36]	; 0x24
 800265e:	f89a 3000 	ldrb.w	r3, [sl]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 80a2 	beq.w	80027ac <_svfiprintf_r+0x1c8>
 8002668:	2300      	movs	r3, #0
 800266a:	f04f 32ff 	mov.w	r2, #4294967295
 800266e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002672:	f10a 0a01 	add.w	sl, sl, #1
 8002676:	9304      	str	r3, [sp, #16]
 8002678:	9307      	str	r3, [sp, #28]
 800267a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800267e:	931a      	str	r3, [sp, #104]	; 0x68
 8002680:	4654      	mov	r4, sl
 8002682:	2205      	movs	r2, #5
 8002684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002688:	4851      	ldr	r0, [pc, #324]	; (80027d0 <_svfiprintf_r+0x1ec>)
 800268a:	f000 fa41 	bl	8002b10 <memchr>
 800268e:	9a04      	ldr	r2, [sp, #16]
 8002690:	b9d8      	cbnz	r0, 80026ca <_svfiprintf_r+0xe6>
 8002692:	06d0      	lsls	r0, r2, #27
 8002694:	bf44      	itt	mi
 8002696:	2320      	movmi	r3, #32
 8002698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800269c:	0711      	lsls	r1, r2, #28
 800269e:	bf44      	itt	mi
 80026a0:	232b      	movmi	r3, #43	; 0x2b
 80026a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026a6:	f89a 3000 	ldrb.w	r3, [sl]
 80026aa:	2b2a      	cmp	r3, #42	; 0x2a
 80026ac:	d015      	beq.n	80026da <_svfiprintf_r+0xf6>
 80026ae:	4654      	mov	r4, sl
 80026b0:	2000      	movs	r0, #0
 80026b2:	f04f 0c0a 	mov.w	ip, #10
 80026b6:	9a07      	ldr	r2, [sp, #28]
 80026b8:	4621      	mov	r1, r4
 80026ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026be:	3b30      	subs	r3, #48	; 0x30
 80026c0:	2b09      	cmp	r3, #9
 80026c2:	d94e      	bls.n	8002762 <_svfiprintf_r+0x17e>
 80026c4:	b1b0      	cbz	r0, 80026f4 <_svfiprintf_r+0x110>
 80026c6:	9207      	str	r2, [sp, #28]
 80026c8:	e014      	b.n	80026f4 <_svfiprintf_r+0x110>
 80026ca:	eba0 0308 	sub.w	r3, r0, r8
 80026ce:	fa09 f303 	lsl.w	r3, r9, r3
 80026d2:	4313      	orrs	r3, r2
 80026d4:	46a2      	mov	sl, r4
 80026d6:	9304      	str	r3, [sp, #16]
 80026d8:	e7d2      	b.n	8002680 <_svfiprintf_r+0x9c>
 80026da:	9b03      	ldr	r3, [sp, #12]
 80026dc:	1d19      	adds	r1, r3, #4
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	9103      	str	r1, [sp, #12]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bfbb      	ittet	lt
 80026e6:	425b      	neglt	r3, r3
 80026e8:	f042 0202 	orrlt.w	r2, r2, #2
 80026ec:	9307      	strge	r3, [sp, #28]
 80026ee:	9307      	strlt	r3, [sp, #28]
 80026f0:	bfb8      	it	lt
 80026f2:	9204      	strlt	r2, [sp, #16]
 80026f4:	7823      	ldrb	r3, [r4, #0]
 80026f6:	2b2e      	cmp	r3, #46	; 0x2e
 80026f8:	d10c      	bne.n	8002714 <_svfiprintf_r+0x130>
 80026fa:	7863      	ldrb	r3, [r4, #1]
 80026fc:	2b2a      	cmp	r3, #42	; 0x2a
 80026fe:	d135      	bne.n	800276c <_svfiprintf_r+0x188>
 8002700:	9b03      	ldr	r3, [sp, #12]
 8002702:	3402      	adds	r4, #2
 8002704:	1d1a      	adds	r2, r3, #4
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	9203      	str	r2, [sp, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	bfb8      	it	lt
 800270e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002712:	9305      	str	r3, [sp, #20]
 8002714:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80027d4 <_svfiprintf_r+0x1f0>
 8002718:	2203      	movs	r2, #3
 800271a:	4650      	mov	r0, sl
 800271c:	7821      	ldrb	r1, [r4, #0]
 800271e:	f000 f9f7 	bl	8002b10 <memchr>
 8002722:	b140      	cbz	r0, 8002736 <_svfiprintf_r+0x152>
 8002724:	2340      	movs	r3, #64	; 0x40
 8002726:	eba0 000a 	sub.w	r0, r0, sl
 800272a:	fa03 f000 	lsl.w	r0, r3, r0
 800272e:	9b04      	ldr	r3, [sp, #16]
 8002730:	3401      	adds	r4, #1
 8002732:	4303      	orrs	r3, r0
 8002734:	9304      	str	r3, [sp, #16]
 8002736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800273a:	2206      	movs	r2, #6
 800273c:	4826      	ldr	r0, [pc, #152]	; (80027d8 <_svfiprintf_r+0x1f4>)
 800273e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002742:	f000 f9e5 	bl	8002b10 <memchr>
 8002746:	2800      	cmp	r0, #0
 8002748:	d038      	beq.n	80027bc <_svfiprintf_r+0x1d8>
 800274a:	4b24      	ldr	r3, [pc, #144]	; (80027dc <_svfiprintf_r+0x1f8>)
 800274c:	bb1b      	cbnz	r3, 8002796 <_svfiprintf_r+0x1b2>
 800274e:	9b03      	ldr	r3, [sp, #12]
 8002750:	3307      	adds	r3, #7
 8002752:	f023 0307 	bic.w	r3, r3, #7
 8002756:	3308      	adds	r3, #8
 8002758:	9303      	str	r3, [sp, #12]
 800275a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800275c:	4433      	add	r3, r6
 800275e:	9309      	str	r3, [sp, #36]	; 0x24
 8002760:	e767      	b.n	8002632 <_svfiprintf_r+0x4e>
 8002762:	460c      	mov	r4, r1
 8002764:	2001      	movs	r0, #1
 8002766:	fb0c 3202 	mla	r2, ip, r2, r3
 800276a:	e7a5      	b.n	80026b8 <_svfiprintf_r+0xd4>
 800276c:	2300      	movs	r3, #0
 800276e:	f04f 0c0a 	mov.w	ip, #10
 8002772:	4619      	mov	r1, r3
 8002774:	3401      	adds	r4, #1
 8002776:	9305      	str	r3, [sp, #20]
 8002778:	4620      	mov	r0, r4
 800277a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800277e:	3a30      	subs	r2, #48	; 0x30
 8002780:	2a09      	cmp	r2, #9
 8002782:	d903      	bls.n	800278c <_svfiprintf_r+0x1a8>
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0c5      	beq.n	8002714 <_svfiprintf_r+0x130>
 8002788:	9105      	str	r1, [sp, #20]
 800278a:	e7c3      	b.n	8002714 <_svfiprintf_r+0x130>
 800278c:	4604      	mov	r4, r0
 800278e:	2301      	movs	r3, #1
 8002790:	fb0c 2101 	mla	r1, ip, r1, r2
 8002794:	e7f0      	b.n	8002778 <_svfiprintf_r+0x194>
 8002796:	ab03      	add	r3, sp, #12
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	462a      	mov	r2, r5
 800279c:	4638      	mov	r0, r7
 800279e:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <_svfiprintf_r+0x1fc>)
 80027a0:	a904      	add	r1, sp, #16
 80027a2:	f3af 8000 	nop.w
 80027a6:	1c42      	adds	r2, r0, #1
 80027a8:	4606      	mov	r6, r0
 80027aa:	d1d6      	bne.n	800275a <_svfiprintf_r+0x176>
 80027ac:	89ab      	ldrh	r3, [r5, #12]
 80027ae:	065b      	lsls	r3, r3, #25
 80027b0:	f53f af2c 	bmi.w	800260c <_svfiprintf_r+0x28>
 80027b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027b6:	b01d      	add	sp, #116	; 0x74
 80027b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027bc:	ab03      	add	r3, sp, #12
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	462a      	mov	r2, r5
 80027c2:	4638      	mov	r0, r7
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <_svfiprintf_r+0x1fc>)
 80027c6:	a904      	add	r1, sp, #16
 80027c8:	f000 f87c 	bl	80028c4 <_printf_i>
 80027cc:	e7eb      	b.n	80027a6 <_svfiprintf_r+0x1c2>
 80027ce:	bf00      	nop
 80027d0:	08002e38 	.word	0x08002e38
 80027d4:	08002e3e 	.word	0x08002e3e
 80027d8:	08002e42 	.word	0x08002e42
 80027dc:	00000000 	.word	0x00000000
 80027e0:	0800252d 	.word	0x0800252d

080027e4 <_printf_common>:
 80027e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027e8:	4616      	mov	r6, r2
 80027ea:	4699      	mov	r9, r3
 80027ec:	688a      	ldr	r2, [r1, #8]
 80027ee:	690b      	ldr	r3, [r1, #16]
 80027f0:	4607      	mov	r7, r0
 80027f2:	4293      	cmp	r3, r2
 80027f4:	bfb8      	it	lt
 80027f6:	4613      	movlt	r3, r2
 80027f8:	6033      	str	r3, [r6, #0]
 80027fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027fe:	460c      	mov	r4, r1
 8002800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002804:	b10a      	cbz	r2, 800280a <_printf_common+0x26>
 8002806:	3301      	adds	r3, #1
 8002808:	6033      	str	r3, [r6, #0]
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	0699      	lsls	r1, r3, #26
 800280e:	bf42      	ittt	mi
 8002810:	6833      	ldrmi	r3, [r6, #0]
 8002812:	3302      	addmi	r3, #2
 8002814:	6033      	strmi	r3, [r6, #0]
 8002816:	6825      	ldr	r5, [r4, #0]
 8002818:	f015 0506 	ands.w	r5, r5, #6
 800281c:	d106      	bne.n	800282c <_printf_common+0x48>
 800281e:	f104 0a19 	add.w	sl, r4, #25
 8002822:	68e3      	ldr	r3, [r4, #12]
 8002824:	6832      	ldr	r2, [r6, #0]
 8002826:	1a9b      	subs	r3, r3, r2
 8002828:	42ab      	cmp	r3, r5
 800282a:	dc28      	bgt.n	800287e <_printf_common+0x9a>
 800282c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002830:	1e13      	subs	r3, r2, #0
 8002832:	6822      	ldr	r2, [r4, #0]
 8002834:	bf18      	it	ne
 8002836:	2301      	movne	r3, #1
 8002838:	0692      	lsls	r2, r2, #26
 800283a:	d42d      	bmi.n	8002898 <_printf_common+0xb4>
 800283c:	4649      	mov	r1, r9
 800283e:	4638      	mov	r0, r7
 8002840:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002844:	47c0      	blx	r8
 8002846:	3001      	adds	r0, #1
 8002848:	d020      	beq.n	800288c <_printf_common+0xa8>
 800284a:	6823      	ldr	r3, [r4, #0]
 800284c:	68e5      	ldr	r5, [r4, #12]
 800284e:	f003 0306 	and.w	r3, r3, #6
 8002852:	2b04      	cmp	r3, #4
 8002854:	bf18      	it	ne
 8002856:	2500      	movne	r5, #0
 8002858:	6832      	ldr	r2, [r6, #0]
 800285a:	f04f 0600 	mov.w	r6, #0
 800285e:	68a3      	ldr	r3, [r4, #8]
 8002860:	bf08      	it	eq
 8002862:	1aad      	subeq	r5, r5, r2
 8002864:	6922      	ldr	r2, [r4, #16]
 8002866:	bf08      	it	eq
 8002868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800286c:	4293      	cmp	r3, r2
 800286e:	bfc4      	itt	gt
 8002870:	1a9b      	subgt	r3, r3, r2
 8002872:	18ed      	addgt	r5, r5, r3
 8002874:	341a      	adds	r4, #26
 8002876:	42b5      	cmp	r5, r6
 8002878:	d11a      	bne.n	80028b0 <_printf_common+0xcc>
 800287a:	2000      	movs	r0, #0
 800287c:	e008      	b.n	8002890 <_printf_common+0xac>
 800287e:	2301      	movs	r3, #1
 8002880:	4652      	mov	r2, sl
 8002882:	4649      	mov	r1, r9
 8002884:	4638      	mov	r0, r7
 8002886:	47c0      	blx	r8
 8002888:	3001      	adds	r0, #1
 800288a:	d103      	bne.n	8002894 <_printf_common+0xb0>
 800288c:	f04f 30ff 	mov.w	r0, #4294967295
 8002890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002894:	3501      	adds	r5, #1
 8002896:	e7c4      	b.n	8002822 <_printf_common+0x3e>
 8002898:	2030      	movs	r0, #48	; 0x30
 800289a:	18e1      	adds	r1, r4, r3
 800289c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028a6:	4422      	add	r2, r4
 80028a8:	3302      	adds	r3, #2
 80028aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028ae:	e7c5      	b.n	800283c <_printf_common+0x58>
 80028b0:	2301      	movs	r3, #1
 80028b2:	4622      	mov	r2, r4
 80028b4:	4649      	mov	r1, r9
 80028b6:	4638      	mov	r0, r7
 80028b8:	47c0      	blx	r8
 80028ba:	3001      	adds	r0, #1
 80028bc:	d0e6      	beq.n	800288c <_printf_common+0xa8>
 80028be:	3601      	adds	r6, #1
 80028c0:	e7d9      	b.n	8002876 <_printf_common+0x92>
	...

080028c4 <_printf_i>:
 80028c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028c8:	7e0f      	ldrb	r7, [r1, #24]
 80028ca:	4691      	mov	r9, r2
 80028cc:	2f78      	cmp	r7, #120	; 0x78
 80028ce:	4680      	mov	r8, r0
 80028d0:	460c      	mov	r4, r1
 80028d2:	469a      	mov	sl, r3
 80028d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80028d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80028da:	d807      	bhi.n	80028ec <_printf_i+0x28>
 80028dc:	2f62      	cmp	r7, #98	; 0x62
 80028de:	d80a      	bhi.n	80028f6 <_printf_i+0x32>
 80028e0:	2f00      	cmp	r7, #0
 80028e2:	f000 80d9 	beq.w	8002a98 <_printf_i+0x1d4>
 80028e6:	2f58      	cmp	r7, #88	; 0x58
 80028e8:	f000 80a4 	beq.w	8002a34 <_printf_i+0x170>
 80028ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80028f4:	e03a      	b.n	800296c <_printf_i+0xa8>
 80028f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80028fa:	2b15      	cmp	r3, #21
 80028fc:	d8f6      	bhi.n	80028ec <_printf_i+0x28>
 80028fe:	a101      	add	r1, pc, #4	; (adr r1, 8002904 <_printf_i+0x40>)
 8002900:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002904:	0800295d 	.word	0x0800295d
 8002908:	08002971 	.word	0x08002971
 800290c:	080028ed 	.word	0x080028ed
 8002910:	080028ed 	.word	0x080028ed
 8002914:	080028ed 	.word	0x080028ed
 8002918:	080028ed 	.word	0x080028ed
 800291c:	08002971 	.word	0x08002971
 8002920:	080028ed 	.word	0x080028ed
 8002924:	080028ed 	.word	0x080028ed
 8002928:	080028ed 	.word	0x080028ed
 800292c:	080028ed 	.word	0x080028ed
 8002930:	08002a7f 	.word	0x08002a7f
 8002934:	080029a1 	.word	0x080029a1
 8002938:	08002a61 	.word	0x08002a61
 800293c:	080028ed 	.word	0x080028ed
 8002940:	080028ed 	.word	0x080028ed
 8002944:	08002aa1 	.word	0x08002aa1
 8002948:	080028ed 	.word	0x080028ed
 800294c:	080029a1 	.word	0x080029a1
 8002950:	080028ed 	.word	0x080028ed
 8002954:	080028ed 	.word	0x080028ed
 8002958:	08002a69 	.word	0x08002a69
 800295c:	682b      	ldr	r3, [r5, #0]
 800295e:	1d1a      	adds	r2, r3, #4
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	602a      	str	r2, [r5, #0]
 8002964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800296c:	2301      	movs	r3, #1
 800296e:	e0a4      	b.n	8002aba <_printf_i+0x1f6>
 8002970:	6820      	ldr	r0, [r4, #0]
 8002972:	6829      	ldr	r1, [r5, #0]
 8002974:	0606      	lsls	r6, r0, #24
 8002976:	f101 0304 	add.w	r3, r1, #4
 800297a:	d50a      	bpl.n	8002992 <_printf_i+0xce>
 800297c:	680e      	ldr	r6, [r1, #0]
 800297e:	602b      	str	r3, [r5, #0]
 8002980:	2e00      	cmp	r6, #0
 8002982:	da03      	bge.n	800298c <_printf_i+0xc8>
 8002984:	232d      	movs	r3, #45	; 0x2d
 8002986:	4276      	negs	r6, r6
 8002988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800298c:	230a      	movs	r3, #10
 800298e:	485e      	ldr	r0, [pc, #376]	; (8002b08 <_printf_i+0x244>)
 8002990:	e019      	b.n	80029c6 <_printf_i+0x102>
 8002992:	680e      	ldr	r6, [r1, #0]
 8002994:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002998:	602b      	str	r3, [r5, #0]
 800299a:	bf18      	it	ne
 800299c:	b236      	sxthne	r6, r6
 800299e:	e7ef      	b.n	8002980 <_printf_i+0xbc>
 80029a0:	682b      	ldr	r3, [r5, #0]
 80029a2:	6820      	ldr	r0, [r4, #0]
 80029a4:	1d19      	adds	r1, r3, #4
 80029a6:	6029      	str	r1, [r5, #0]
 80029a8:	0601      	lsls	r1, r0, #24
 80029aa:	d501      	bpl.n	80029b0 <_printf_i+0xec>
 80029ac:	681e      	ldr	r6, [r3, #0]
 80029ae:	e002      	b.n	80029b6 <_printf_i+0xf2>
 80029b0:	0646      	lsls	r6, r0, #25
 80029b2:	d5fb      	bpl.n	80029ac <_printf_i+0xe8>
 80029b4:	881e      	ldrh	r6, [r3, #0]
 80029b6:	2f6f      	cmp	r7, #111	; 0x6f
 80029b8:	bf0c      	ite	eq
 80029ba:	2308      	moveq	r3, #8
 80029bc:	230a      	movne	r3, #10
 80029be:	4852      	ldr	r0, [pc, #328]	; (8002b08 <_printf_i+0x244>)
 80029c0:	2100      	movs	r1, #0
 80029c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029c6:	6865      	ldr	r5, [r4, #4]
 80029c8:	2d00      	cmp	r5, #0
 80029ca:	bfa8      	it	ge
 80029cc:	6821      	ldrge	r1, [r4, #0]
 80029ce:	60a5      	str	r5, [r4, #8]
 80029d0:	bfa4      	itt	ge
 80029d2:	f021 0104 	bicge.w	r1, r1, #4
 80029d6:	6021      	strge	r1, [r4, #0]
 80029d8:	b90e      	cbnz	r6, 80029de <_printf_i+0x11a>
 80029da:	2d00      	cmp	r5, #0
 80029dc:	d04d      	beq.n	8002a7a <_printf_i+0x1b6>
 80029de:	4615      	mov	r5, r2
 80029e0:	fbb6 f1f3 	udiv	r1, r6, r3
 80029e4:	fb03 6711 	mls	r7, r3, r1, r6
 80029e8:	5dc7      	ldrb	r7, [r0, r7]
 80029ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80029ee:	4637      	mov	r7, r6
 80029f0:	42bb      	cmp	r3, r7
 80029f2:	460e      	mov	r6, r1
 80029f4:	d9f4      	bls.n	80029e0 <_printf_i+0x11c>
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d10b      	bne.n	8002a12 <_printf_i+0x14e>
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	07de      	lsls	r6, r3, #31
 80029fe:	d508      	bpl.n	8002a12 <_printf_i+0x14e>
 8002a00:	6923      	ldr	r3, [r4, #16]
 8002a02:	6861      	ldr	r1, [r4, #4]
 8002a04:	4299      	cmp	r1, r3
 8002a06:	bfde      	ittt	le
 8002a08:	2330      	movle	r3, #48	; 0x30
 8002a0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002a12:	1b52      	subs	r2, r2, r5
 8002a14:	6122      	str	r2, [r4, #16]
 8002a16:	464b      	mov	r3, r9
 8002a18:	4621      	mov	r1, r4
 8002a1a:	4640      	mov	r0, r8
 8002a1c:	f8cd a000 	str.w	sl, [sp]
 8002a20:	aa03      	add	r2, sp, #12
 8002a22:	f7ff fedf 	bl	80027e4 <_printf_common>
 8002a26:	3001      	adds	r0, #1
 8002a28:	d14c      	bne.n	8002ac4 <_printf_i+0x200>
 8002a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2e:	b004      	add	sp, #16
 8002a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a34:	4834      	ldr	r0, [pc, #208]	; (8002b08 <_printf_i+0x244>)
 8002a36:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002a3a:	6829      	ldr	r1, [r5, #0]
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a42:	6029      	str	r1, [r5, #0]
 8002a44:	061d      	lsls	r5, r3, #24
 8002a46:	d514      	bpl.n	8002a72 <_printf_i+0x1ae>
 8002a48:	07df      	lsls	r7, r3, #31
 8002a4a:	bf44      	itt	mi
 8002a4c:	f043 0320 	orrmi.w	r3, r3, #32
 8002a50:	6023      	strmi	r3, [r4, #0]
 8002a52:	b91e      	cbnz	r6, 8002a5c <_printf_i+0x198>
 8002a54:	6823      	ldr	r3, [r4, #0]
 8002a56:	f023 0320 	bic.w	r3, r3, #32
 8002a5a:	6023      	str	r3, [r4, #0]
 8002a5c:	2310      	movs	r3, #16
 8002a5e:	e7af      	b.n	80029c0 <_printf_i+0xfc>
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	f043 0320 	orr.w	r3, r3, #32
 8002a66:	6023      	str	r3, [r4, #0]
 8002a68:	2378      	movs	r3, #120	; 0x78
 8002a6a:	4828      	ldr	r0, [pc, #160]	; (8002b0c <_printf_i+0x248>)
 8002a6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a70:	e7e3      	b.n	8002a3a <_printf_i+0x176>
 8002a72:	0659      	lsls	r1, r3, #25
 8002a74:	bf48      	it	mi
 8002a76:	b2b6      	uxthmi	r6, r6
 8002a78:	e7e6      	b.n	8002a48 <_printf_i+0x184>
 8002a7a:	4615      	mov	r5, r2
 8002a7c:	e7bb      	b.n	80029f6 <_printf_i+0x132>
 8002a7e:	682b      	ldr	r3, [r5, #0]
 8002a80:	6826      	ldr	r6, [r4, #0]
 8002a82:	1d18      	adds	r0, r3, #4
 8002a84:	6961      	ldr	r1, [r4, #20]
 8002a86:	6028      	str	r0, [r5, #0]
 8002a88:	0635      	lsls	r5, r6, #24
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	d501      	bpl.n	8002a92 <_printf_i+0x1ce>
 8002a8e:	6019      	str	r1, [r3, #0]
 8002a90:	e002      	b.n	8002a98 <_printf_i+0x1d4>
 8002a92:	0670      	lsls	r0, r6, #25
 8002a94:	d5fb      	bpl.n	8002a8e <_printf_i+0x1ca>
 8002a96:	8019      	strh	r1, [r3, #0]
 8002a98:	2300      	movs	r3, #0
 8002a9a:	4615      	mov	r5, r2
 8002a9c:	6123      	str	r3, [r4, #16]
 8002a9e:	e7ba      	b.n	8002a16 <_printf_i+0x152>
 8002aa0:	682b      	ldr	r3, [r5, #0]
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	1d1a      	adds	r2, r3, #4
 8002aa6:	602a      	str	r2, [r5, #0]
 8002aa8:	681d      	ldr	r5, [r3, #0]
 8002aaa:	6862      	ldr	r2, [r4, #4]
 8002aac:	4628      	mov	r0, r5
 8002aae:	f000 f82f 	bl	8002b10 <memchr>
 8002ab2:	b108      	cbz	r0, 8002ab8 <_printf_i+0x1f4>
 8002ab4:	1b40      	subs	r0, r0, r5
 8002ab6:	6060      	str	r0, [r4, #4]
 8002ab8:	6863      	ldr	r3, [r4, #4]
 8002aba:	6123      	str	r3, [r4, #16]
 8002abc:	2300      	movs	r3, #0
 8002abe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ac2:	e7a8      	b.n	8002a16 <_printf_i+0x152>
 8002ac4:	462a      	mov	r2, r5
 8002ac6:	4649      	mov	r1, r9
 8002ac8:	4640      	mov	r0, r8
 8002aca:	6923      	ldr	r3, [r4, #16]
 8002acc:	47d0      	blx	sl
 8002ace:	3001      	adds	r0, #1
 8002ad0:	d0ab      	beq.n	8002a2a <_printf_i+0x166>
 8002ad2:	6823      	ldr	r3, [r4, #0]
 8002ad4:	079b      	lsls	r3, r3, #30
 8002ad6:	d413      	bmi.n	8002b00 <_printf_i+0x23c>
 8002ad8:	68e0      	ldr	r0, [r4, #12]
 8002ada:	9b03      	ldr	r3, [sp, #12]
 8002adc:	4298      	cmp	r0, r3
 8002ade:	bfb8      	it	lt
 8002ae0:	4618      	movlt	r0, r3
 8002ae2:	e7a4      	b.n	8002a2e <_printf_i+0x16a>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	4632      	mov	r2, r6
 8002ae8:	4649      	mov	r1, r9
 8002aea:	4640      	mov	r0, r8
 8002aec:	47d0      	blx	sl
 8002aee:	3001      	adds	r0, #1
 8002af0:	d09b      	beq.n	8002a2a <_printf_i+0x166>
 8002af2:	3501      	adds	r5, #1
 8002af4:	68e3      	ldr	r3, [r4, #12]
 8002af6:	9903      	ldr	r1, [sp, #12]
 8002af8:	1a5b      	subs	r3, r3, r1
 8002afa:	42ab      	cmp	r3, r5
 8002afc:	dcf2      	bgt.n	8002ae4 <_printf_i+0x220>
 8002afe:	e7eb      	b.n	8002ad8 <_printf_i+0x214>
 8002b00:	2500      	movs	r5, #0
 8002b02:	f104 0619 	add.w	r6, r4, #25
 8002b06:	e7f5      	b.n	8002af4 <_printf_i+0x230>
 8002b08:	08002e49 	.word	0x08002e49
 8002b0c:	08002e5a 	.word	0x08002e5a

08002b10 <memchr>:
 8002b10:	4603      	mov	r3, r0
 8002b12:	b510      	push	{r4, lr}
 8002b14:	b2c9      	uxtb	r1, r1
 8002b16:	4402      	add	r2, r0
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	d101      	bne.n	8002b22 <memchr+0x12>
 8002b1e:	2000      	movs	r0, #0
 8002b20:	e003      	b.n	8002b2a <memchr+0x1a>
 8002b22:	7804      	ldrb	r4, [r0, #0]
 8002b24:	3301      	adds	r3, #1
 8002b26:	428c      	cmp	r4, r1
 8002b28:	d1f6      	bne.n	8002b18 <memchr+0x8>
 8002b2a:	bd10      	pop	{r4, pc}

08002b2c <memcpy>:
 8002b2c:	440a      	add	r2, r1
 8002b2e:	4291      	cmp	r1, r2
 8002b30:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b34:	d100      	bne.n	8002b38 <memcpy+0xc>
 8002b36:	4770      	bx	lr
 8002b38:	b510      	push	{r4, lr}
 8002b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b3e:	4291      	cmp	r1, r2
 8002b40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b44:	d1f9      	bne.n	8002b3a <memcpy+0xe>
 8002b46:	bd10      	pop	{r4, pc}

08002b48 <memmove>:
 8002b48:	4288      	cmp	r0, r1
 8002b4a:	b510      	push	{r4, lr}
 8002b4c:	eb01 0402 	add.w	r4, r1, r2
 8002b50:	d902      	bls.n	8002b58 <memmove+0x10>
 8002b52:	4284      	cmp	r4, r0
 8002b54:	4623      	mov	r3, r4
 8002b56:	d807      	bhi.n	8002b68 <memmove+0x20>
 8002b58:	1e43      	subs	r3, r0, #1
 8002b5a:	42a1      	cmp	r1, r4
 8002b5c:	d008      	beq.n	8002b70 <memmove+0x28>
 8002b5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002b66:	e7f8      	b.n	8002b5a <memmove+0x12>
 8002b68:	4601      	mov	r1, r0
 8002b6a:	4402      	add	r2, r0
 8002b6c:	428a      	cmp	r2, r1
 8002b6e:	d100      	bne.n	8002b72 <memmove+0x2a>
 8002b70:	bd10      	pop	{r4, pc}
 8002b72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002b7a:	e7f7      	b.n	8002b6c <memmove+0x24>

08002b7c <_free_r>:
 8002b7c:	b538      	push	{r3, r4, r5, lr}
 8002b7e:	4605      	mov	r5, r0
 8002b80:	2900      	cmp	r1, #0
 8002b82:	d040      	beq.n	8002c06 <_free_r+0x8a>
 8002b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b88:	1f0c      	subs	r4, r1, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	bfb8      	it	lt
 8002b8e:	18e4      	addlt	r4, r4, r3
 8002b90:	f000 f910 	bl	8002db4 <__malloc_lock>
 8002b94:	4a1c      	ldr	r2, [pc, #112]	; (8002c08 <_free_r+0x8c>)
 8002b96:	6813      	ldr	r3, [r2, #0]
 8002b98:	b933      	cbnz	r3, 8002ba8 <_free_r+0x2c>
 8002b9a:	6063      	str	r3, [r4, #4]
 8002b9c:	6014      	str	r4, [r2, #0]
 8002b9e:	4628      	mov	r0, r5
 8002ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ba4:	f000 b90c 	b.w	8002dc0 <__malloc_unlock>
 8002ba8:	42a3      	cmp	r3, r4
 8002baa:	d908      	bls.n	8002bbe <_free_r+0x42>
 8002bac:	6820      	ldr	r0, [r4, #0]
 8002bae:	1821      	adds	r1, r4, r0
 8002bb0:	428b      	cmp	r3, r1
 8002bb2:	bf01      	itttt	eq
 8002bb4:	6819      	ldreq	r1, [r3, #0]
 8002bb6:	685b      	ldreq	r3, [r3, #4]
 8002bb8:	1809      	addeq	r1, r1, r0
 8002bba:	6021      	streq	r1, [r4, #0]
 8002bbc:	e7ed      	b.n	8002b9a <_free_r+0x1e>
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	b10b      	cbz	r3, 8002bc8 <_free_r+0x4c>
 8002bc4:	42a3      	cmp	r3, r4
 8002bc6:	d9fa      	bls.n	8002bbe <_free_r+0x42>
 8002bc8:	6811      	ldr	r1, [r2, #0]
 8002bca:	1850      	adds	r0, r2, r1
 8002bcc:	42a0      	cmp	r0, r4
 8002bce:	d10b      	bne.n	8002be8 <_free_r+0x6c>
 8002bd0:	6820      	ldr	r0, [r4, #0]
 8002bd2:	4401      	add	r1, r0
 8002bd4:	1850      	adds	r0, r2, r1
 8002bd6:	4283      	cmp	r3, r0
 8002bd8:	6011      	str	r1, [r2, #0]
 8002bda:	d1e0      	bne.n	8002b9e <_free_r+0x22>
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	4401      	add	r1, r0
 8002be2:	6011      	str	r1, [r2, #0]
 8002be4:	6053      	str	r3, [r2, #4]
 8002be6:	e7da      	b.n	8002b9e <_free_r+0x22>
 8002be8:	d902      	bls.n	8002bf0 <_free_r+0x74>
 8002bea:	230c      	movs	r3, #12
 8002bec:	602b      	str	r3, [r5, #0]
 8002bee:	e7d6      	b.n	8002b9e <_free_r+0x22>
 8002bf0:	6820      	ldr	r0, [r4, #0]
 8002bf2:	1821      	adds	r1, r4, r0
 8002bf4:	428b      	cmp	r3, r1
 8002bf6:	bf01      	itttt	eq
 8002bf8:	6819      	ldreq	r1, [r3, #0]
 8002bfa:	685b      	ldreq	r3, [r3, #4]
 8002bfc:	1809      	addeq	r1, r1, r0
 8002bfe:	6021      	streq	r1, [r4, #0]
 8002c00:	6063      	str	r3, [r4, #4]
 8002c02:	6054      	str	r4, [r2, #4]
 8002c04:	e7cb      	b.n	8002b9e <_free_r+0x22>
 8002c06:	bd38      	pop	{r3, r4, r5, pc}
 8002c08:	20000170 	.word	0x20000170

08002c0c <sbrk_aligned>:
 8002c0c:	b570      	push	{r4, r5, r6, lr}
 8002c0e:	4e0e      	ldr	r6, [pc, #56]	; (8002c48 <sbrk_aligned+0x3c>)
 8002c10:	460c      	mov	r4, r1
 8002c12:	6831      	ldr	r1, [r6, #0]
 8002c14:	4605      	mov	r5, r0
 8002c16:	b911      	cbnz	r1, 8002c1e <sbrk_aligned+0x12>
 8002c18:	f000 f8bc 	bl	8002d94 <_sbrk_r>
 8002c1c:	6030      	str	r0, [r6, #0]
 8002c1e:	4621      	mov	r1, r4
 8002c20:	4628      	mov	r0, r5
 8002c22:	f000 f8b7 	bl	8002d94 <_sbrk_r>
 8002c26:	1c43      	adds	r3, r0, #1
 8002c28:	d00a      	beq.n	8002c40 <sbrk_aligned+0x34>
 8002c2a:	1cc4      	adds	r4, r0, #3
 8002c2c:	f024 0403 	bic.w	r4, r4, #3
 8002c30:	42a0      	cmp	r0, r4
 8002c32:	d007      	beq.n	8002c44 <sbrk_aligned+0x38>
 8002c34:	1a21      	subs	r1, r4, r0
 8002c36:	4628      	mov	r0, r5
 8002c38:	f000 f8ac 	bl	8002d94 <_sbrk_r>
 8002c3c:	3001      	adds	r0, #1
 8002c3e:	d101      	bne.n	8002c44 <sbrk_aligned+0x38>
 8002c40:	f04f 34ff 	mov.w	r4, #4294967295
 8002c44:	4620      	mov	r0, r4
 8002c46:	bd70      	pop	{r4, r5, r6, pc}
 8002c48:	20000174 	.word	0x20000174

08002c4c <_malloc_r>:
 8002c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c50:	1ccd      	adds	r5, r1, #3
 8002c52:	f025 0503 	bic.w	r5, r5, #3
 8002c56:	3508      	adds	r5, #8
 8002c58:	2d0c      	cmp	r5, #12
 8002c5a:	bf38      	it	cc
 8002c5c:	250c      	movcc	r5, #12
 8002c5e:	2d00      	cmp	r5, #0
 8002c60:	4607      	mov	r7, r0
 8002c62:	db01      	blt.n	8002c68 <_malloc_r+0x1c>
 8002c64:	42a9      	cmp	r1, r5
 8002c66:	d905      	bls.n	8002c74 <_malloc_r+0x28>
 8002c68:	230c      	movs	r3, #12
 8002c6a:	2600      	movs	r6, #0
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	4630      	mov	r0, r6
 8002c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c74:	4e2e      	ldr	r6, [pc, #184]	; (8002d30 <_malloc_r+0xe4>)
 8002c76:	f000 f89d 	bl	8002db4 <__malloc_lock>
 8002c7a:	6833      	ldr	r3, [r6, #0]
 8002c7c:	461c      	mov	r4, r3
 8002c7e:	bb34      	cbnz	r4, 8002cce <_malloc_r+0x82>
 8002c80:	4629      	mov	r1, r5
 8002c82:	4638      	mov	r0, r7
 8002c84:	f7ff ffc2 	bl	8002c0c <sbrk_aligned>
 8002c88:	1c43      	adds	r3, r0, #1
 8002c8a:	4604      	mov	r4, r0
 8002c8c:	d14d      	bne.n	8002d2a <_malloc_r+0xde>
 8002c8e:	6834      	ldr	r4, [r6, #0]
 8002c90:	4626      	mov	r6, r4
 8002c92:	2e00      	cmp	r6, #0
 8002c94:	d140      	bne.n	8002d18 <_malloc_r+0xcc>
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	4631      	mov	r1, r6
 8002c9a:	4638      	mov	r0, r7
 8002c9c:	eb04 0803 	add.w	r8, r4, r3
 8002ca0:	f000 f878 	bl	8002d94 <_sbrk_r>
 8002ca4:	4580      	cmp	r8, r0
 8002ca6:	d13a      	bne.n	8002d1e <_malloc_r+0xd2>
 8002ca8:	6821      	ldr	r1, [r4, #0]
 8002caa:	3503      	adds	r5, #3
 8002cac:	1a6d      	subs	r5, r5, r1
 8002cae:	f025 0503 	bic.w	r5, r5, #3
 8002cb2:	3508      	adds	r5, #8
 8002cb4:	2d0c      	cmp	r5, #12
 8002cb6:	bf38      	it	cc
 8002cb8:	250c      	movcc	r5, #12
 8002cba:	4638      	mov	r0, r7
 8002cbc:	4629      	mov	r1, r5
 8002cbe:	f7ff ffa5 	bl	8002c0c <sbrk_aligned>
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	d02b      	beq.n	8002d1e <_malloc_r+0xd2>
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	442b      	add	r3, r5
 8002cca:	6023      	str	r3, [r4, #0]
 8002ccc:	e00e      	b.n	8002cec <_malloc_r+0xa0>
 8002cce:	6822      	ldr	r2, [r4, #0]
 8002cd0:	1b52      	subs	r2, r2, r5
 8002cd2:	d41e      	bmi.n	8002d12 <_malloc_r+0xc6>
 8002cd4:	2a0b      	cmp	r2, #11
 8002cd6:	d916      	bls.n	8002d06 <_malloc_r+0xba>
 8002cd8:	1961      	adds	r1, r4, r5
 8002cda:	42a3      	cmp	r3, r4
 8002cdc:	6025      	str	r5, [r4, #0]
 8002cde:	bf18      	it	ne
 8002ce0:	6059      	strne	r1, [r3, #4]
 8002ce2:	6863      	ldr	r3, [r4, #4]
 8002ce4:	bf08      	it	eq
 8002ce6:	6031      	streq	r1, [r6, #0]
 8002ce8:	5162      	str	r2, [r4, r5]
 8002cea:	604b      	str	r3, [r1, #4]
 8002cec:	4638      	mov	r0, r7
 8002cee:	f104 060b 	add.w	r6, r4, #11
 8002cf2:	f000 f865 	bl	8002dc0 <__malloc_unlock>
 8002cf6:	f026 0607 	bic.w	r6, r6, #7
 8002cfa:	1d23      	adds	r3, r4, #4
 8002cfc:	1af2      	subs	r2, r6, r3
 8002cfe:	d0b6      	beq.n	8002c6e <_malloc_r+0x22>
 8002d00:	1b9b      	subs	r3, r3, r6
 8002d02:	50a3      	str	r3, [r4, r2]
 8002d04:	e7b3      	b.n	8002c6e <_malloc_r+0x22>
 8002d06:	6862      	ldr	r2, [r4, #4]
 8002d08:	42a3      	cmp	r3, r4
 8002d0a:	bf0c      	ite	eq
 8002d0c:	6032      	streq	r2, [r6, #0]
 8002d0e:	605a      	strne	r2, [r3, #4]
 8002d10:	e7ec      	b.n	8002cec <_malloc_r+0xa0>
 8002d12:	4623      	mov	r3, r4
 8002d14:	6864      	ldr	r4, [r4, #4]
 8002d16:	e7b2      	b.n	8002c7e <_malloc_r+0x32>
 8002d18:	4634      	mov	r4, r6
 8002d1a:	6876      	ldr	r6, [r6, #4]
 8002d1c:	e7b9      	b.n	8002c92 <_malloc_r+0x46>
 8002d1e:	230c      	movs	r3, #12
 8002d20:	4638      	mov	r0, r7
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	f000 f84c 	bl	8002dc0 <__malloc_unlock>
 8002d28:	e7a1      	b.n	8002c6e <_malloc_r+0x22>
 8002d2a:	6025      	str	r5, [r4, #0]
 8002d2c:	e7de      	b.n	8002cec <_malloc_r+0xa0>
 8002d2e:	bf00      	nop
 8002d30:	20000170 	.word	0x20000170

08002d34 <_realloc_r>:
 8002d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d38:	4680      	mov	r8, r0
 8002d3a:	4614      	mov	r4, r2
 8002d3c:	460e      	mov	r6, r1
 8002d3e:	b921      	cbnz	r1, 8002d4a <_realloc_r+0x16>
 8002d40:	4611      	mov	r1, r2
 8002d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d46:	f7ff bf81 	b.w	8002c4c <_malloc_r>
 8002d4a:	b92a      	cbnz	r2, 8002d58 <_realloc_r+0x24>
 8002d4c:	f7ff ff16 	bl	8002b7c <_free_r>
 8002d50:	4625      	mov	r5, r4
 8002d52:	4628      	mov	r0, r5
 8002d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d58:	f000 f838 	bl	8002dcc <_malloc_usable_size_r>
 8002d5c:	4284      	cmp	r4, r0
 8002d5e:	4607      	mov	r7, r0
 8002d60:	d802      	bhi.n	8002d68 <_realloc_r+0x34>
 8002d62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002d66:	d812      	bhi.n	8002d8e <_realloc_r+0x5a>
 8002d68:	4621      	mov	r1, r4
 8002d6a:	4640      	mov	r0, r8
 8002d6c:	f7ff ff6e 	bl	8002c4c <_malloc_r>
 8002d70:	4605      	mov	r5, r0
 8002d72:	2800      	cmp	r0, #0
 8002d74:	d0ed      	beq.n	8002d52 <_realloc_r+0x1e>
 8002d76:	42bc      	cmp	r4, r7
 8002d78:	4622      	mov	r2, r4
 8002d7a:	4631      	mov	r1, r6
 8002d7c:	bf28      	it	cs
 8002d7e:	463a      	movcs	r2, r7
 8002d80:	f7ff fed4 	bl	8002b2c <memcpy>
 8002d84:	4631      	mov	r1, r6
 8002d86:	4640      	mov	r0, r8
 8002d88:	f7ff fef8 	bl	8002b7c <_free_r>
 8002d8c:	e7e1      	b.n	8002d52 <_realloc_r+0x1e>
 8002d8e:	4635      	mov	r5, r6
 8002d90:	e7df      	b.n	8002d52 <_realloc_r+0x1e>
	...

08002d94 <_sbrk_r>:
 8002d94:	b538      	push	{r3, r4, r5, lr}
 8002d96:	2300      	movs	r3, #0
 8002d98:	4d05      	ldr	r5, [pc, #20]	; (8002db0 <_sbrk_r+0x1c>)
 8002d9a:	4604      	mov	r4, r0
 8002d9c:	4608      	mov	r0, r1
 8002d9e:	602b      	str	r3, [r5, #0]
 8002da0:	f7fd fc0c 	bl	80005bc <_sbrk>
 8002da4:	1c43      	adds	r3, r0, #1
 8002da6:	d102      	bne.n	8002dae <_sbrk_r+0x1a>
 8002da8:	682b      	ldr	r3, [r5, #0]
 8002daa:	b103      	cbz	r3, 8002dae <_sbrk_r+0x1a>
 8002dac:	6023      	str	r3, [r4, #0]
 8002dae:	bd38      	pop	{r3, r4, r5, pc}
 8002db0:	20000178 	.word	0x20000178

08002db4 <__malloc_lock>:
 8002db4:	4801      	ldr	r0, [pc, #4]	; (8002dbc <__malloc_lock+0x8>)
 8002db6:	f000 b811 	b.w	8002ddc <__retarget_lock_acquire_recursive>
 8002dba:	bf00      	nop
 8002dbc:	2000017c 	.word	0x2000017c

08002dc0 <__malloc_unlock>:
 8002dc0:	4801      	ldr	r0, [pc, #4]	; (8002dc8 <__malloc_unlock+0x8>)
 8002dc2:	f000 b80c 	b.w	8002dde <__retarget_lock_release_recursive>
 8002dc6:	bf00      	nop
 8002dc8:	2000017c 	.word	0x2000017c

08002dcc <_malloc_usable_size_r>:
 8002dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dd0:	1f18      	subs	r0, r3, #4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	bfbc      	itt	lt
 8002dd6:	580b      	ldrlt	r3, [r1, r0]
 8002dd8:	18c0      	addlt	r0, r0, r3
 8002dda:	4770      	bx	lr

08002ddc <__retarget_lock_acquire_recursive>:
 8002ddc:	4770      	bx	lr

08002dde <__retarget_lock_release_recursive>:
 8002dde:	4770      	bx	lr

08002de0 <_init>:
 8002de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de2:	bf00      	nop
 8002de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de6:	bc08      	pop	{r3}
 8002de8:	469e      	mov	lr, r3
 8002dea:	4770      	bx	lr

08002dec <_fini>:
 8002dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dee:	bf00      	nop
 8002df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df2:	bc08      	pop	{r3}
 8002df4:	469e      	mov	lr, r3
 8002df6:	4770      	bx	lr
